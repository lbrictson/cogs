// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/lbrictson/cogs/ent/scriptstats"
)

// ScriptStats is the model entity for the ScriptStats schema.
type ScriptStats struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ScriptID holds the value of the "script_id" field.
	ScriptID int `json:"script_id,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID int `json:"project_id,omitempty"`
	// TotalRuns holds the value of the "total_runs" field.
	TotalRuns int `json:"total_runs,omitempty"`
	// TotalErrors holds the value of the "total_errors" field.
	TotalErrors int `json:"total_errors,omitempty"`
	// TotalSuccess holds the value of the "total_success" field.
	TotalSuccess int `json:"total_success,omitempty"`
	// AverageRuntime holds the value of the "average_runtime" field.
	AverageRuntime int `json:"average_runtime,omitempty"`
	// MinRuntime holds the value of the "min_runtime" field.
	MinRuntime int `json:"min_runtime,omitempty"`
	// MaxRuntime holds the value of the "max_runtime" field.
	MaxRuntime int `json:"max_runtime,omitempty"`
	// LastRun holds the value of the "last_run" field.
	LastRun time.Time `json:"last_run,omitempty"`
	// TotalRuntime holds the value of the "total_runtime" field.
	TotalRuntime int `json:"total_runtime,omitempty"`
	// SuccessRate holds the value of the "success_rate" field.
	SuccessRate  int `json:"success_rate,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScriptStats) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scriptstats.FieldID, scriptstats.FieldScriptID, scriptstats.FieldProjectID, scriptstats.FieldTotalRuns, scriptstats.FieldTotalErrors, scriptstats.FieldTotalSuccess, scriptstats.FieldAverageRuntime, scriptstats.FieldMinRuntime, scriptstats.FieldMaxRuntime, scriptstats.FieldTotalRuntime, scriptstats.FieldSuccessRate:
			values[i] = new(sql.NullInt64)
		case scriptstats.FieldLastRun:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScriptStats fields.
func (ss *ScriptStats) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scriptstats.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ss.ID = int(value.Int64)
		case scriptstats.FieldScriptID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field script_id", values[i])
			} else if value.Valid {
				ss.ScriptID = int(value.Int64)
			}
		case scriptstats.FieldProjectID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value.Valid {
				ss.ProjectID = int(value.Int64)
			}
		case scriptstats.FieldTotalRuns:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_runs", values[i])
			} else if value.Valid {
				ss.TotalRuns = int(value.Int64)
			}
		case scriptstats.FieldTotalErrors:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_errors", values[i])
			} else if value.Valid {
				ss.TotalErrors = int(value.Int64)
			}
		case scriptstats.FieldTotalSuccess:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_success", values[i])
			} else if value.Valid {
				ss.TotalSuccess = int(value.Int64)
			}
		case scriptstats.FieldAverageRuntime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field average_runtime", values[i])
			} else if value.Valid {
				ss.AverageRuntime = int(value.Int64)
			}
		case scriptstats.FieldMinRuntime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field min_runtime", values[i])
			} else if value.Valid {
				ss.MinRuntime = int(value.Int64)
			}
		case scriptstats.FieldMaxRuntime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_runtime", values[i])
			} else if value.Valid {
				ss.MaxRuntime = int(value.Int64)
			}
		case scriptstats.FieldLastRun:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_run", values[i])
			} else if value.Valid {
				ss.LastRun = value.Time
			}
		case scriptstats.FieldTotalRuntime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_runtime", values[i])
			} else if value.Valid {
				ss.TotalRuntime = int(value.Int64)
			}
		case scriptstats.FieldSuccessRate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field success_rate", values[i])
			} else if value.Valid {
				ss.SuccessRate = int(value.Int64)
			}
		default:
			ss.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScriptStats.
// This includes values selected through modifiers, order, etc.
func (ss *ScriptStats) Value(name string) (ent.Value, error) {
	return ss.selectValues.Get(name)
}

// Update returns a builder for updating this ScriptStats.
// Note that you need to call ScriptStats.Unwrap() before calling this method if this ScriptStats
// was returned from a transaction, and the transaction was committed or rolled back.
func (ss *ScriptStats) Update() *ScriptStatsUpdateOne {
	return NewScriptStatsClient(ss.config).UpdateOne(ss)
}

// Unwrap unwraps the ScriptStats entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ss *ScriptStats) Unwrap() *ScriptStats {
	_tx, ok := ss.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScriptStats is not a transactional entity")
	}
	ss.config.driver = _tx.drv
	return ss
}

// String implements the fmt.Stringer.
func (ss *ScriptStats) String() string {
	var builder strings.Builder
	builder.WriteString("ScriptStats(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ss.ID))
	builder.WriteString("script_id=")
	builder.WriteString(fmt.Sprintf("%v", ss.ScriptID))
	builder.WriteString(", ")
	builder.WriteString("project_id=")
	builder.WriteString(fmt.Sprintf("%v", ss.ProjectID))
	builder.WriteString(", ")
	builder.WriteString("total_runs=")
	builder.WriteString(fmt.Sprintf("%v", ss.TotalRuns))
	builder.WriteString(", ")
	builder.WriteString("total_errors=")
	builder.WriteString(fmt.Sprintf("%v", ss.TotalErrors))
	builder.WriteString(", ")
	builder.WriteString("total_success=")
	builder.WriteString(fmt.Sprintf("%v", ss.TotalSuccess))
	builder.WriteString(", ")
	builder.WriteString("average_runtime=")
	builder.WriteString(fmt.Sprintf("%v", ss.AverageRuntime))
	builder.WriteString(", ")
	builder.WriteString("min_runtime=")
	builder.WriteString(fmt.Sprintf("%v", ss.MinRuntime))
	builder.WriteString(", ")
	builder.WriteString("max_runtime=")
	builder.WriteString(fmt.Sprintf("%v", ss.MaxRuntime))
	builder.WriteString(", ")
	builder.WriteString("last_run=")
	builder.WriteString(ss.LastRun.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("total_runtime=")
	builder.WriteString(fmt.Sprintf("%v", ss.TotalRuntime))
	builder.WriteString(", ")
	builder.WriteString("success_rate=")
	builder.WriteString(fmt.Sprintf("%v", ss.SuccessRate))
	builder.WriteByte(')')
	return builder.String()
}

// ScriptStatsSlice is a parsable slice of ScriptStats.
type ScriptStatsSlice []*ScriptStats
