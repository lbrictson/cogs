// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/cogs/ent/predicate"
	"github.com/lbrictson/cogs/ent/scriptstats"
)

// ScriptStatsUpdate is the builder for updating ScriptStats entities.
type ScriptStatsUpdate struct {
	config
	hooks    []Hook
	mutation *ScriptStatsMutation
}

// Where appends a list predicates to the ScriptStatsUpdate builder.
func (ssu *ScriptStatsUpdate) Where(ps ...predicate.ScriptStats) *ScriptStatsUpdate {
	ssu.mutation.Where(ps...)
	return ssu
}

// SetScriptID sets the "script_id" field.
func (ssu *ScriptStatsUpdate) SetScriptID(i int) *ScriptStatsUpdate {
	ssu.mutation.ResetScriptID()
	ssu.mutation.SetScriptID(i)
	return ssu
}

// AddScriptID adds i to the "script_id" field.
func (ssu *ScriptStatsUpdate) AddScriptID(i int) *ScriptStatsUpdate {
	ssu.mutation.AddScriptID(i)
	return ssu
}

// SetProjectID sets the "project_id" field.
func (ssu *ScriptStatsUpdate) SetProjectID(i int) *ScriptStatsUpdate {
	ssu.mutation.ResetProjectID()
	ssu.mutation.SetProjectID(i)
	return ssu
}

// AddProjectID adds i to the "project_id" field.
func (ssu *ScriptStatsUpdate) AddProjectID(i int) *ScriptStatsUpdate {
	ssu.mutation.AddProjectID(i)
	return ssu
}

// SetTotalRuns sets the "total_runs" field.
func (ssu *ScriptStatsUpdate) SetTotalRuns(i int) *ScriptStatsUpdate {
	ssu.mutation.ResetTotalRuns()
	ssu.mutation.SetTotalRuns(i)
	return ssu
}

// AddTotalRuns adds i to the "total_runs" field.
func (ssu *ScriptStatsUpdate) AddTotalRuns(i int) *ScriptStatsUpdate {
	ssu.mutation.AddTotalRuns(i)
	return ssu
}

// SetTotalErrors sets the "total_errors" field.
func (ssu *ScriptStatsUpdate) SetTotalErrors(i int) *ScriptStatsUpdate {
	ssu.mutation.ResetTotalErrors()
	ssu.mutation.SetTotalErrors(i)
	return ssu
}

// AddTotalErrors adds i to the "total_errors" field.
func (ssu *ScriptStatsUpdate) AddTotalErrors(i int) *ScriptStatsUpdate {
	ssu.mutation.AddTotalErrors(i)
	return ssu
}

// SetTotalSuccess sets the "total_success" field.
func (ssu *ScriptStatsUpdate) SetTotalSuccess(i int) *ScriptStatsUpdate {
	ssu.mutation.ResetTotalSuccess()
	ssu.mutation.SetTotalSuccess(i)
	return ssu
}

// AddTotalSuccess adds i to the "total_success" field.
func (ssu *ScriptStatsUpdate) AddTotalSuccess(i int) *ScriptStatsUpdate {
	ssu.mutation.AddTotalSuccess(i)
	return ssu
}

// SetAverageRuntime sets the "average_runtime" field.
func (ssu *ScriptStatsUpdate) SetAverageRuntime(i int) *ScriptStatsUpdate {
	ssu.mutation.ResetAverageRuntime()
	ssu.mutation.SetAverageRuntime(i)
	return ssu
}

// AddAverageRuntime adds i to the "average_runtime" field.
func (ssu *ScriptStatsUpdate) AddAverageRuntime(i int) *ScriptStatsUpdate {
	ssu.mutation.AddAverageRuntime(i)
	return ssu
}

// SetMinRuntime sets the "min_runtime" field.
func (ssu *ScriptStatsUpdate) SetMinRuntime(i int) *ScriptStatsUpdate {
	ssu.mutation.ResetMinRuntime()
	ssu.mutation.SetMinRuntime(i)
	return ssu
}

// AddMinRuntime adds i to the "min_runtime" field.
func (ssu *ScriptStatsUpdate) AddMinRuntime(i int) *ScriptStatsUpdate {
	ssu.mutation.AddMinRuntime(i)
	return ssu
}

// SetMaxRuntime sets the "max_runtime" field.
func (ssu *ScriptStatsUpdate) SetMaxRuntime(i int) *ScriptStatsUpdate {
	ssu.mutation.ResetMaxRuntime()
	ssu.mutation.SetMaxRuntime(i)
	return ssu
}

// AddMaxRuntime adds i to the "max_runtime" field.
func (ssu *ScriptStatsUpdate) AddMaxRuntime(i int) *ScriptStatsUpdate {
	ssu.mutation.AddMaxRuntime(i)
	return ssu
}

// SetLastRun sets the "last_run" field.
func (ssu *ScriptStatsUpdate) SetLastRun(t time.Time) *ScriptStatsUpdate {
	ssu.mutation.SetLastRun(t)
	return ssu
}

// SetTotalRuntime sets the "total_runtime" field.
func (ssu *ScriptStatsUpdate) SetTotalRuntime(i int) *ScriptStatsUpdate {
	ssu.mutation.ResetTotalRuntime()
	ssu.mutation.SetTotalRuntime(i)
	return ssu
}

// AddTotalRuntime adds i to the "total_runtime" field.
func (ssu *ScriptStatsUpdate) AddTotalRuntime(i int) *ScriptStatsUpdate {
	ssu.mutation.AddTotalRuntime(i)
	return ssu
}

// SetSuccessRate sets the "success_rate" field.
func (ssu *ScriptStatsUpdate) SetSuccessRate(i int) *ScriptStatsUpdate {
	ssu.mutation.ResetSuccessRate()
	ssu.mutation.SetSuccessRate(i)
	return ssu
}

// AddSuccessRate adds i to the "success_rate" field.
func (ssu *ScriptStatsUpdate) AddSuccessRate(i int) *ScriptStatsUpdate {
	ssu.mutation.AddSuccessRate(i)
	return ssu
}

// Mutation returns the ScriptStatsMutation object of the builder.
func (ssu *ScriptStatsUpdate) Mutation() *ScriptStatsMutation {
	return ssu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ssu *ScriptStatsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ssu.sqlSave, ssu.mutation, ssu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *ScriptStatsUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *ScriptStatsUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *ScriptStatsUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ssu *ScriptStatsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(scriptstats.Table, scriptstats.Columns, sqlgraph.NewFieldSpec(scriptstats.FieldID, field.TypeInt))
	if ps := ssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssu.mutation.ScriptID(); ok {
		_spec.SetField(scriptstats.FieldScriptID, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedScriptID(); ok {
		_spec.AddField(scriptstats.FieldScriptID, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.ProjectID(); ok {
		_spec.SetField(scriptstats.FieldProjectID, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedProjectID(); ok {
		_spec.AddField(scriptstats.FieldProjectID, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.TotalRuns(); ok {
		_spec.SetField(scriptstats.FieldTotalRuns, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedTotalRuns(); ok {
		_spec.AddField(scriptstats.FieldTotalRuns, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.TotalErrors(); ok {
		_spec.SetField(scriptstats.FieldTotalErrors, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedTotalErrors(); ok {
		_spec.AddField(scriptstats.FieldTotalErrors, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.TotalSuccess(); ok {
		_spec.SetField(scriptstats.FieldTotalSuccess, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedTotalSuccess(); ok {
		_spec.AddField(scriptstats.FieldTotalSuccess, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AverageRuntime(); ok {
		_spec.SetField(scriptstats.FieldAverageRuntime, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedAverageRuntime(); ok {
		_spec.AddField(scriptstats.FieldAverageRuntime, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.MinRuntime(); ok {
		_spec.SetField(scriptstats.FieldMinRuntime, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedMinRuntime(); ok {
		_spec.AddField(scriptstats.FieldMinRuntime, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.MaxRuntime(); ok {
		_spec.SetField(scriptstats.FieldMaxRuntime, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedMaxRuntime(); ok {
		_spec.AddField(scriptstats.FieldMaxRuntime, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.LastRun(); ok {
		_spec.SetField(scriptstats.FieldLastRun, field.TypeTime, value)
	}
	if value, ok := ssu.mutation.TotalRuntime(); ok {
		_spec.SetField(scriptstats.FieldTotalRuntime, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedTotalRuntime(); ok {
		_spec.AddField(scriptstats.FieldTotalRuntime, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.SuccessRate(); ok {
		_spec.SetField(scriptstats.FieldSuccessRate, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedSuccessRate(); ok {
		_spec.AddField(scriptstats.FieldSuccessRate, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scriptstats.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ssu.mutation.done = true
	return n, nil
}

// ScriptStatsUpdateOne is the builder for updating a single ScriptStats entity.
type ScriptStatsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScriptStatsMutation
}

// SetScriptID sets the "script_id" field.
func (ssuo *ScriptStatsUpdateOne) SetScriptID(i int) *ScriptStatsUpdateOne {
	ssuo.mutation.ResetScriptID()
	ssuo.mutation.SetScriptID(i)
	return ssuo
}

// AddScriptID adds i to the "script_id" field.
func (ssuo *ScriptStatsUpdateOne) AddScriptID(i int) *ScriptStatsUpdateOne {
	ssuo.mutation.AddScriptID(i)
	return ssuo
}

// SetProjectID sets the "project_id" field.
func (ssuo *ScriptStatsUpdateOne) SetProjectID(i int) *ScriptStatsUpdateOne {
	ssuo.mutation.ResetProjectID()
	ssuo.mutation.SetProjectID(i)
	return ssuo
}

// AddProjectID adds i to the "project_id" field.
func (ssuo *ScriptStatsUpdateOne) AddProjectID(i int) *ScriptStatsUpdateOne {
	ssuo.mutation.AddProjectID(i)
	return ssuo
}

// SetTotalRuns sets the "total_runs" field.
func (ssuo *ScriptStatsUpdateOne) SetTotalRuns(i int) *ScriptStatsUpdateOne {
	ssuo.mutation.ResetTotalRuns()
	ssuo.mutation.SetTotalRuns(i)
	return ssuo
}

// AddTotalRuns adds i to the "total_runs" field.
func (ssuo *ScriptStatsUpdateOne) AddTotalRuns(i int) *ScriptStatsUpdateOne {
	ssuo.mutation.AddTotalRuns(i)
	return ssuo
}

// SetTotalErrors sets the "total_errors" field.
func (ssuo *ScriptStatsUpdateOne) SetTotalErrors(i int) *ScriptStatsUpdateOne {
	ssuo.mutation.ResetTotalErrors()
	ssuo.mutation.SetTotalErrors(i)
	return ssuo
}

// AddTotalErrors adds i to the "total_errors" field.
func (ssuo *ScriptStatsUpdateOne) AddTotalErrors(i int) *ScriptStatsUpdateOne {
	ssuo.mutation.AddTotalErrors(i)
	return ssuo
}

// SetTotalSuccess sets the "total_success" field.
func (ssuo *ScriptStatsUpdateOne) SetTotalSuccess(i int) *ScriptStatsUpdateOne {
	ssuo.mutation.ResetTotalSuccess()
	ssuo.mutation.SetTotalSuccess(i)
	return ssuo
}

// AddTotalSuccess adds i to the "total_success" field.
func (ssuo *ScriptStatsUpdateOne) AddTotalSuccess(i int) *ScriptStatsUpdateOne {
	ssuo.mutation.AddTotalSuccess(i)
	return ssuo
}

// SetAverageRuntime sets the "average_runtime" field.
func (ssuo *ScriptStatsUpdateOne) SetAverageRuntime(i int) *ScriptStatsUpdateOne {
	ssuo.mutation.ResetAverageRuntime()
	ssuo.mutation.SetAverageRuntime(i)
	return ssuo
}

// AddAverageRuntime adds i to the "average_runtime" field.
func (ssuo *ScriptStatsUpdateOne) AddAverageRuntime(i int) *ScriptStatsUpdateOne {
	ssuo.mutation.AddAverageRuntime(i)
	return ssuo
}

// SetMinRuntime sets the "min_runtime" field.
func (ssuo *ScriptStatsUpdateOne) SetMinRuntime(i int) *ScriptStatsUpdateOne {
	ssuo.mutation.ResetMinRuntime()
	ssuo.mutation.SetMinRuntime(i)
	return ssuo
}

// AddMinRuntime adds i to the "min_runtime" field.
func (ssuo *ScriptStatsUpdateOne) AddMinRuntime(i int) *ScriptStatsUpdateOne {
	ssuo.mutation.AddMinRuntime(i)
	return ssuo
}

// SetMaxRuntime sets the "max_runtime" field.
func (ssuo *ScriptStatsUpdateOne) SetMaxRuntime(i int) *ScriptStatsUpdateOne {
	ssuo.mutation.ResetMaxRuntime()
	ssuo.mutation.SetMaxRuntime(i)
	return ssuo
}

// AddMaxRuntime adds i to the "max_runtime" field.
func (ssuo *ScriptStatsUpdateOne) AddMaxRuntime(i int) *ScriptStatsUpdateOne {
	ssuo.mutation.AddMaxRuntime(i)
	return ssuo
}

// SetLastRun sets the "last_run" field.
func (ssuo *ScriptStatsUpdateOne) SetLastRun(t time.Time) *ScriptStatsUpdateOne {
	ssuo.mutation.SetLastRun(t)
	return ssuo
}

// SetTotalRuntime sets the "total_runtime" field.
func (ssuo *ScriptStatsUpdateOne) SetTotalRuntime(i int) *ScriptStatsUpdateOne {
	ssuo.mutation.ResetTotalRuntime()
	ssuo.mutation.SetTotalRuntime(i)
	return ssuo
}

// AddTotalRuntime adds i to the "total_runtime" field.
func (ssuo *ScriptStatsUpdateOne) AddTotalRuntime(i int) *ScriptStatsUpdateOne {
	ssuo.mutation.AddTotalRuntime(i)
	return ssuo
}

// SetSuccessRate sets the "success_rate" field.
func (ssuo *ScriptStatsUpdateOne) SetSuccessRate(i int) *ScriptStatsUpdateOne {
	ssuo.mutation.ResetSuccessRate()
	ssuo.mutation.SetSuccessRate(i)
	return ssuo
}

// AddSuccessRate adds i to the "success_rate" field.
func (ssuo *ScriptStatsUpdateOne) AddSuccessRate(i int) *ScriptStatsUpdateOne {
	ssuo.mutation.AddSuccessRate(i)
	return ssuo
}

// Mutation returns the ScriptStatsMutation object of the builder.
func (ssuo *ScriptStatsUpdateOne) Mutation() *ScriptStatsMutation {
	return ssuo.mutation
}

// Where appends a list predicates to the ScriptStatsUpdate builder.
func (ssuo *ScriptStatsUpdateOne) Where(ps ...predicate.ScriptStats) *ScriptStatsUpdateOne {
	ssuo.mutation.Where(ps...)
	return ssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssuo *ScriptStatsUpdateOne) Select(field string, fields ...string) *ScriptStatsUpdateOne {
	ssuo.fields = append([]string{field}, fields...)
	return ssuo
}

// Save executes the query and returns the updated ScriptStats entity.
func (ssuo *ScriptStatsUpdateOne) Save(ctx context.Context) (*ScriptStats, error) {
	return withHooks(ctx, ssuo.sqlSave, ssuo.mutation, ssuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *ScriptStatsUpdateOne) SaveX(ctx context.Context) *ScriptStats {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *ScriptStatsUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *ScriptStatsUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ssuo *ScriptStatsUpdateOne) sqlSave(ctx context.Context) (_node *ScriptStats, err error) {
	_spec := sqlgraph.NewUpdateSpec(scriptstats.Table, scriptstats.Columns, sqlgraph.NewFieldSpec(scriptstats.FieldID, field.TypeInt))
	id, ok := ssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScriptStats.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scriptstats.FieldID)
		for _, f := range fields {
			if !scriptstats.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scriptstats.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssuo.mutation.ScriptID(); ok {
		_spec.SetField(scriptstats.FieldScriptID, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedScriptID(); ok {
		_spec.AddField(scriptstats.FieldScriptID, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.ProjectID(); ok {
		_spec.SetField(scriptstats.FieldProjectID, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedProjectID(); ok {
		_spec.AddField(scriptstats.FieldProjectID, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.TotalRuns(); ok {
		_spec.SetField(scriptstats.FieldTotalRuns, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedTotalRuns(); ok {
		_spec.AddField(scriptstats.FieldTotalRuns, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.TotalErrors(); ok {
		_spec.SetField(scriptstats.FieldTotalErrors, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedTotalErrors(); ok {
		_spec.AddField(scriptstats.FieldTotalErrors, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.TotalSuccess(); ok {
		_spec.SetField(scriptstats.FieldTotalSuccess, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedTotalSuccess(); ok {
		_spec.AddField(scriptstats.FieldTotalSuccess, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AverageRuntime(); ok {
		_spec.SetField(scriptstats.FieldAverageRuntime, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedAverageRuntime(); ok {
		_spec.AddField(scriptstats.FieldAverageRuntime, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.MinRuntime(); ok {
		_spec.SetField(scriptstats.FieldMinRuntime, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedMinRuntime(); ok {
		_spec.AddField(scriptstats.FieldMinRuntime, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.MaxRuntime(); ok {
		_spec.SetField(scriptstats.FieldMaxRuntime, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedMaxRuntime(); ok {
		_spec.AddField(scriptstats.FieldMaxRuntime, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.LastRun(); ok {
		_spec.SetField(scriptstats.FieldLastRun, field.TypeTime, value)
	}
	if value, ok := ssuo.mutation.TotalRuntime(); ok {
		_spec.SetField(scriptstats.FieldTotalRuntime, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedTotalRuntime(); ok {
		_spec.AddField(scriptstats.FieldTotalRuntime, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.SuccessRate(); ok {
		_spec.SetField(scriptstats.FieldSuccessRate, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedSuccessRate(); ok {
		_spec.AddField(scriptstats.FieldSuccessRate, field.TypeInt, value)
	}
	_node = &ScriptStats{config: ssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scriptstats.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ssuo.mutation.done = true
	return _node, nil
}
