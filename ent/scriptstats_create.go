// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/cogs/ent/scriptstats"
)

// ScriptStatsCreate is the builder for creating a ScriptStats entity.
type ScriptStatsCreate struct {
	config
	mutation *ScriptStatsMutation
	hooks    []Hook
}

// SetScriptID sets the "script_id" field.
func (ssc *ScriptStatsCreate) SetScriptID(i int) *ScriptStatsCreate {
	ssc.mutation.SetScriptID(i)
	return ssc
}

// SetProjectID sets the "project_id" field.
func (ssc *ScriptStatsCreate) SetProjectID(i int) *ScriptStatsCreate {
	ssc.mutation.SetProjectID(i)
	return ssc
}

// SetTotalRuns sets the "total_runs" field.
func (ssc *ScriptStatsCreate) SetTotalRuns(i int) *ScriptStatsCreate {
	ssc.mutation.SetTotalRuns(i)
	return ssc
}

// SetTotalErrors sets the "total_errors" field.
func (ssc *ScriptStatsCreate) SetTotalErrors(i int) *ScriptStatsCreate {
	ssc.mutation.SetTotalErrors(i)
	return ssc
}

// SetTotalSuccess sets the "total_success" field.
func (ssc *ScriptStatsCreate) SetTotalSuccess(i int) *ScriptStatsCreate {
	ssc.mutation.SetTotalSuccess(i)
	return ssc
}

// SetAverageRuntime sets the "average_runtime" field.
func (ssc *ScriptStatsCreate) SetAverageRuntime(i int) *ScriptStatsCreate {
	ssc.mutation.SetAverageRuntime(i)
	return ssc
}

// SetMinRuntime sets the "min_runtime" field.
func (ssc *ScriptStatsCreate) SetMinRuntime(i int) *ScriptStatsCreate {
	ssc.mutation.SetMinRuntime(i)
	return ssc
}

// SetMaxRuntime sets the "max_runtime" field.
func (ssc *ScriptStatsCreate) SetMaxRuntime(i int) *ScriptStatsCreate {
	ssc.mutation.SetMaxRuntime(i)
	return ssc
}

// SetLastRun sets the "last_run" field.
func (ssc *ScriptStatsCreate) SetLastRun(t time.Time) *ScriptStatsCreate {
	ssc.mutation.SetLastRun(t)
	return ssc
}

// SetTotalRuntime sets the "total_runtime" field.
func (ssc *ScriptStatsCreate) SetTotalRuntime(i int) *ScriptStatsCreate {
	ssc.mutation.SetTotalRuntime(i)
	return ssc
}

// SetSuccessRate sets the "success_rate" field.
func (ssc *ScriptStatsCreate) SetSuccessRate(i int) *ScriptStatsCreate {
	ssc.mutation.SetSuccessRate(i)
	return ssc
}

// Mutation returns the ScriptStatsMutation object of the builder.
func (ssc *ScriptStatsCreate) Mutation() *ScriptStatsMutation {
	return ssc.mutation
}

// Save creates the ScriptStats in the database.
func (ssc *ScriptStatsCreate) Save(ctx context.Context) (*ScriptStats, error) {
	return withHooks(ctx, ssc.sqlSave, ssc.mutation, ssc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ssc *ScriptStatsCreate) SaveX(ctx context.Context) *ScriptStats {
	v, err := ssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssc *ScriptStatsCreate) Exec(ctx context.Context) error {
	_, err := ssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssc *ScriptStatsCreate) ExecX(ctx context.Context) {
	if err := ssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssc *ScriptStatsCreate) check() error {
	if _, ok := ssc.mutation.ScriptID(); !ok {
		return &ValidationError{Name: "script_id", err: errors.New(`ent: missing required field "ScriptStats.script_id"`)}
	}
	if _, ok := ssc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "ScriptStats.project_id"`)}
	}
	if _, ok := ssc.mutation.TotalRuns(); !ok {
		return &ValidationError{Name: "total_runs", err: errors.New(`ent: missing required field "ScriptStats.total_runs"`)}
	}
	if _, ok := ssc.mutation.TotalErrors(); !ok {
		return &ValidationError{Name: "total_errors", err: errors.New(`ent: missing required field "ScriptStats.total_errors"`)}
	}
	if _, ok := ssc.mutation.TotalSuccess(); !ok {
		return &ValidationError{Name: "total_success", err: errors.New(`ent: missing required field "ScriptStats.total_success"`)}
	}
	if _, ok := ssc.mutation.AverageRuntime(); !ok {
		return &ValidationError{Name: "average_runtime", err: errors.New(`ent: missing required field "ScriptStats.average_runtime"`)}
	}
	if _, ok := ssc.mutation.MinRuntime(); !ok {
		return &ValidationError{Name: "min_runtime", err: errors.New(`ent: missing required field "ScriptStats.min_runtime"`)}
	}
	if _, ok := ssc.mutation.MaxRuntime(); !ok {
		return &ValidationError{Name: "max_runtime", err: errors.New(`ent: missing required field "ScriptStats.max_runtime"`)}
	}
	if _, ok := ssc.mutation.LastRun(); !ok {
		return &ValidationError{Name: "last_run", err: errors.New(`ent: missing required field "ScriptStats.last_run"`)}
	}
	if _, ok := ssc.mutation.TotalRuntime(); !ok {
		return &ValidationError{Name: "total_runtime", err: errors.New(`ent: missing required field "ScriptStats.total_runtime"`)}
	}
	if _, ok := ssc.mutation.SuccessRate(); !ok {
		return &ValidationError{Name: "success_rate", err: errors.New(`ent: missing required field "ScriptStats.success_rate"`)}
	}
	return nil
}

func (ssc *ScriptStatsCreate) sqlSave(ctx context.Context) (*ScriptStats, error) {
	if err := ssc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ssc.mutation.id = &_node.ID
	ssc.mutation.done = true
	return _node, nil
}

func (ssc *ScriptStatsCreate) createSpec() (*ScriptStats, *sqlgraph.CreateSpec) {
	var (
		_node = &ScriptStats{config: ssc.config}
		_spec = sqlgraph.NewCreateSpec(scriptstats.Table, sqlgraph.NewFieldSpec(scriptstats.FieldID, field.TypeInt))
	)
	if value, ok := ssc.mutation.ScriptID(); ok {
		_spec.SetField(scriptstats.FieldScriptID, field.TypeInt, value)
		_node.ScriptID = value
	}
	if value, ok := ssc.mutation.ProjectID(); ok {
		_spec.SetField(scriptstats.FieldProjectID, field.TypeInt, value)
		_node.ProjectID = value
	}
	if value, ok := ssc.mutation.TotalRuns(); ok {
		_spec.SetField(scriptstats.FieldTotalRuns, field.TypeInt, value)
		_node.TotalRuns = value
	}
	if value, ok := ssc.mutation.TotalErrors(); ok {
		_spec.SetField(scriptstats.FieldTotalErrors, field.TypeInt, value)
		_node.TotalErrors = value
	}
	if value, ok := ssc.mutation.TotalSuccess(); ok {
		_spec.SetField(scriptstats.FieldTotalSuccess, field.TypeInt, value)
		_node.TotalSuccess = value
	}
	if value, ok := ssc.mutation.AverageRuntime(); ok {
		_spec.SetField(scriptstats.FieldAverageRuntime, field.TypeInt, value)
		_node.AverageRuntime = value
	}
	if value, ok := ssc.mutation.MinRuntime(); ok {
		_spec.SetField(scriptstats.FieldMinRuntime, field.TypeInt, value)
		_node.MinRuntime = value
	}
	if value, ok := ssc.mutation.MaxRuntime(); ok {
		_spec.SetField(scriptstats.FieldMaxRuntime, field.TypeInt, value)
		_node.MaxRuntime = value
	}
	if value, ok := ssc.mutation.LastRun(); ok {
		_spec.SetField(scriptstats.FieldLastRun, field.TypeTime, value)
		_node.LastRun = value
	}
	if value, ok := ssc.mutation.TotalRuntime(); ok {
		_spec.SetField(scriptstats.FieldTotalRuntime, field.TypeInt, value)
		_node.TotalRuntime = value
	}
	if value, ok := ssc.mutation.SuccessRate(); ok {
		_spec.SetField(scriptstats.FieldSuccessRate, field.TypeInt, value)
		_node.SuccessRate = value
	}
	return _node, _spec
}

// ScriptStatsCreateBulk is the builder for creating many ScriptStats entities in bulk.
type ScriptStatsCreateBulk struct {
	config
	builders []*ScriptStatsCreate
}

// Save creates the ScriptStats entities in the database.
func (sscb *ScriptStatsCreateBulk) Save(ctx context.Context) ([]*ScriptStats, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sscb.builders))
	nodes := make([]*ScriptStats, len(sscb.builders))
	mutators := make([]Mutator, len(sscb.builders))
	for i := range sscb.builders {
		func(i int, root context.Context) {
			builder := sscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScriptStatsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sscb *ScriptStatsCreateBulk) SaveX(ctx context.Context) []*ScriptStats {
	v, err := sscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sscb *ScriptStatsCreateBulk) Exec(ctx context.Context) error {
	_, err := sscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscb *ScriptStatsCreateBulk) ExecX(ctx context.Context) {
	if err := sscb.Exec(ctx); err != nil {
		panic(err)
	}
}
