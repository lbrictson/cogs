// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/lbrictson/cogs/ent/history"
)

// History is the model entity for the History schema.
type History struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// RunID holds the value of the "run_id" field.
	RunID string `json:"run_id,omitempty"`
	// Success holds the value of the "success" field.
	Success bool `json:"success,omitempty"`
	// ExitCode holds the value of the "exit_code" field.
	ExitCode int `json:"exit_code,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration int `json:"duration,omitempty"`
	// Trigger holds the value of the "trigger" field.
	Trigger string `json:"trigger,omitempty"`
	// Output holds the value of the "output" field.
	Output string `json:"output,omitempty"`
	// TriggeredBy holds the value of the "triggered_by" field.
	TriggeredBy string `json:"triggered_by,omitempty"`
	// ScriptID holds the value of the "script_id" field.
	ScriptID int `json:"script_id,omitempty"`
	// Arguments holds the value of the "arguments" field.
	Arguments map[string]string `json:"arguments,omitempty"`
	// Status holds the value of the "status" field.
	Status       string `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*History) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case history.FieldArguments:
			values[i] = new([]byte)
		case history.FieldSuccess:
			values[i] = new(sql.NullBool)
		case history.FieldID, history.FieldExitCode, history.FieldDuration, history.FieldScriptID:
			values[i] = new(sql.NullInt64)
		case history.FieldRunID, history.FieldTrigger, history.FieldOutput, history.FieldTriggeredBy, history.FieldStatus:
			values[i] = new(sql.NullString)
		case history.FieldCreatedAt, history.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the History fields.
func (h *History) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case history.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = int(value.Int64)
		case history.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				h.CreatedAt = value.Time
			}
		case history.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				h.UpdatedAt = value.Time
			}
		case history.FieldRunID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field run_id", values[i])
			} else if value.Valid {
				h.RunID = value.String
			}
		case history.FieldSuccess:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field success", values[i])
			} else if value.Valid {
				h.Success = value.Bool
			}
		case history.FieldExitCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exit_code", values[i])
			} else if value.Valid {
				h.ExitCode = int(value.Int64)
			}
		case history.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				h.Duration = int(value.Int64)
			}
		case history.FieldTrigger:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trigger", values[i])
			} else if value.Valid {
				h.Trigger = value.String
			}
		case history.FieldOutput:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field output", values[i])
			} else if value.Valid {
				h.Output = value.String
			}
		case history.FieldTriggeredBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field triggered_by", values[i])
			} else if value.Valid {
				h.TriggeredBy = value.String
			}
		case history.FieldScriptID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field script_id", values[i])
			} else if value.Valid {
				h.ScriptID = int(value.Int64)
			}
		case history.FieldArguments:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field arguments", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &h.Arguments); err != nil {
					return fmt.Errorf("unmarshal field arguments: %w", err)
				}
			}
		case history.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				h.Status = value.String
			}
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the History.
// This includes values selected through modifiers, order, etc.
func (h *History) Value(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// Update returns a builder for updating this History.
// Note that you need to call History.Unwrap() before calling this method if this History
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *History) Update() *HistoryUpdateOne {
	return NewHistoryClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the History entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *History) Unwrap() *History {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: History is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *History) String() string {
	var builder strings.Builder
	builder.WriteString("History(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("created_at=")
	builder.WriteString(h.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(h.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("run_id=")
	builder.WriteString(h.RunID)
	builder.WriteString(", ")
	builder.WriteString("success=")
	builder.WriteString(fmt.Sprintf("%v", h.Success))
	builder.WriteString(", ")
	builder.WriteString("exit_code=")
	builder.WriteString(fmt.Sprintf("%v", h.ExitCode))
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", h.Duration))
	builder.WriteString(", ")
	builder.WriteString("trigger=")
	builder.WriteString(h.Trigger)
	builder.WriteString(", ")
	builder.WriteString("output=")
	builder.WriteString(h.Output)
	builder.WriteString(", ")
	builder.WriteString("triggered_by=")
	builder.WriteString(h.TriggeredBy)
	builder.WriteString(", ")
	builder.WriteString("script_id=")
	builder.WriteString(fmt.Sprintf("%v", h.ScriptID))
	builder.WriteString(", ")
	builder.WriteString("arguments=")
	builder.WriteString(fmt.Sprintf("%v", h.Arguments))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(h.Status)
	builder.WriteByte(')')
	return builder.String()
}

// Histories is a parsable slice of History.
type Histories []*History
