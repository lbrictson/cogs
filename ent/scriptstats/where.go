// Code generated by ent, DO NOT EDIT.

package scriptstats

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lbrictson/cogs/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLTE(FieldID, id))
}

// ScriptID applies equality check predicate on the "script_id" field. It's identical to ScriptIDEQ.
func ScriptID(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldScriptID, v))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldProjectID, v))
}

// TotalRuns applies equality check predicate on the "total_runs" field. It's identical to TotalRunsEQ.
func TotalRuns(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldTotalRuns, v))
}

// TotalErrors applies equality check predicate on the "total_errors" field. It's identical to TotalErrorsEQ.
func TotalErrors(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldTotalErrors, v))
}

// TotalSuccess applies equality check predicate on the "total_success" field. It's identical to TotalSuccessEQ.
func TotalSuccess(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldTotalSuccess, v))
}

// AverageRuntime applies equality check predicate on the "average_runtime" field. It's identical to AverageRuntimeEQ.
func AverageRuntime(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldAverageRuntime, v))
}

// MinRuntime applies equality check predicate on the "min_runtime" field. It's identical to MinRuntimeEQ.
func MinRuntime(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldMinRuntime, v))
}

// MaxRuntime applies equality check predicate on the "max_runtime" field. It's identical to MaxRuntimeEQ.
func MaxRuntime(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldMaxRuntime, v))
}

// LastRun applies equality check predicate on the "last_run" field. It's identical to LastRunEQ.
func LastRun(v time.Time) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldLastRun, v))
}

// TotalRuntime applies equality check predicate on the "total_runtime" field. It's identical to TotalRuntimeEQ.
func TotalRuntime(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldTotalRuntime, v))
}

// SuccessRate applies equality check predicate on the "success_rate" field. It's identical to SuccessRateEQ.
func SuccessRate(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldSuccessRate, v))
}

// ScriptIDEQ applies the EQ predicate on the "script_id" field.
func ScriptIDEQ(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldScriptID, v))
}

// ScriptIDNEQ applies the NEQ predicate on the "script_id" field.
func ScriptIDNEQ(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNEQ(FieldScriptID, v))
}

// ScriptIDIn applies the In predicate on the "script_id" field.
func ScriptIDIn(vs ...int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldIn(FieldScriptID, vs...))
}

// ScriptIDNotIn applies the NotIn predicate on the "script_id" field.
func ScriptIDNotIn(vs ...int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNotIn(FieldScriptID, vs...))
}

// ScriptIDGT applies the GT predicate on the "script_id" field.
func ScriptIDGT(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGT(FieldScriptID, v))
}

// ScriptIDGTE applies the GTE predicate on the "script_id" field.
func ScriptIDGTE(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGTE(FieldScriptID, v))
}

// ScriptIDLT applies the LT predicate on the "script_id" field.
func ScriptIDLT(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLT(FieldScriptID, v))
}

// ScriptIDLTE applies the LTE predicate on the "script_id" field.
func ScriptIDLTE(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLTE(FieldScriptID, v))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNotIn(FieldProjectID, vs...))
}

// ProjectIDGT applies the GT predicate on the "project_id" field.
func ProjectIDGT(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGT(FieldProjectID, v))
}

// ProjectIDGTE applies the GTE predicate on the "project_id" field.
func ProjectIDGTE(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGTE(FieldProjectID, v))
}

// ProjectIDLT applies the LT predicate on the "project_id" field.
func ProjectIDLT(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLT(FieldProjectID, v))
}

// ProjectIDLTE applies the LTE predicate on the "project_id" field.
func ProjectIDLTE(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLTE(FieldProjectID, v))
}

// TotalRunsEQ applies the EQ predicate on the "total_runs" field.
func TotalRunsEQ(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldTotalRuns, v))
}

// TotalRunsNEQ applies the NEQ predicate on the "total_runs" field.
func TotalRunsNEQ(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNEQ(FieldTotalRuns, v))
}

// TotalRunsIn applies the In predicate on the "total_runs" field.
func TotalRunsIn(vs ...int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldIn(FieldTotalRuns, vs...))
}

// TotalRunsNotIn applies the NotIn predicate on the "total_runs" field.
func TotalRunsNotIn(vs ...int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNotIn(FieldTotalRuns, vs...))
}

// TotalRunsGT applies the GT predicate on the "total_runs" field.
func TotalRunsGT(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGT(FieldTotalRuns, v))
}

// TotalRunsGTE applies the GTE predicate on the "total_runs" field.
func TotalRunsGTE(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGTE(FieldTotalRuns, v))
}

// TotalRunsLT applies the LT predicate on the "total_runs" field.
func TotalRunsLT(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLT(FieldTotalRuns, v))
}

// TotalRunsLTE applies the LTE predicate on the "total_runs" field.
func TotalRunsLTE(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLTE(FieldTotalRuns, v))
}

// TotalErrorsEQ applies the EQ predicate on the "total_errors" field.
func TotalErrorsEQ(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldTotalErrors, v))
}

// TotalErrorsNEQ applies the NEQ predicate on the "total_errors" field.
func TotalErrorsNEQ(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNEQ(FieldTotalErrors, v))
}

// TotalErrorsIn applies the In predicate on the "total_errors" field.
func TotalErrorsIn(vs ...int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldIn(FieldTotalErrors, vs...))
}

// TotalErrorsNotIn applies the NotIn predicate on the "total_errors" field.
func TotalErrorsNotIn(vs ...int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNotIn(FieldTotalErrors, vs...))
}

// TotalErrorsGT applies the GT predicate on the "total_errors" field.
func TotalErrorsGT(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGT(FieldTotalErrors, v))
}

// TotalErrorsGTE applies the GTE predicate on the "total_errors" field.
func TotalErrorsGTE(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGTE(FieldTotalErrors, v))
}

// TotalErrorsLT applies the LT predicate on the "total_errors" field.
func TotalErrorsLT(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLT(FieldTotalErrors, v))
}

// TotalErrorsLTE applies the LTE predicate on the "total_errors" field.
func TotalErrorsLTE(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLTE(FieldTotalErrors, v))
}

// TotalSuccessEQ applies the EQ predicate on the "total_success" field.
func TotalSuccessEQ(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldTotalSuccess, v))
}

// TotalSuccessNEQ applies the NEQ predicate on the "total_success" field.
func TotalSuccessNEQ(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNEQ(FieldTotalSuccess, v))
}

// TotalSuccessIn applies the In predicate on the "total_success" field.
func TotalSuccessIn(vs ...int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldIn(FieldTotalSuccess, vs...))
}

// TotalSuccessNotIn applies the NotIn predicate on the "total_success" field.
func TotalSuccessNotIn(vs ...int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNotIn(FieldTotalSuccess, vs...))
}

// TotalSuccessGT applies the GT predicate on the "total_success" field.
func TotalSuccessGT(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGT(FieldTotalSuccess, v))
}

// TotalSuccessGTE applies the GTE predicate on the "total_success" field.
func TotalSuccessGTE(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGTE(FieldTotalSuccess, v))
}

// TotalSuccessLT applies the LT predicate on the "total_success" field.
func TotalSuccessLT(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLT(FieldTotalSuccess, v))
}

// TotalSuccessLTE applies the LTE predicate on the "total_success" field.
func TotalSuccessLTE(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLTE(FieldTotalSuccess, v))
}

// AverageRuntimeEQ applies the EQ predicate on the "average_runtime" field.
func AverageRuntimeEQ(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldAverageRuntime, v))
}

// AverageRuntimeNEQ applies the NEQ predicate on the "average_runtime" field.
func AverageRuntimeNEQ(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNEQ(FieldAverageRuntime, v))
}

// AverageRuntimeIn applies the In predicate on the "average_runtime" field.
func AverageRuntimeIn(vs ...int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldIn(FieldAverageRuntime, vs...))
}

// AverageRuntimeNotIn applies the NotIn predicate on the "average_runtime" field.
func AverageRuntimeNotIn(vs ...int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNotIn(FieldAverageRuntime, vs...))
}

// AverageRuntimeGT applies the GT predicate on the "average_runtime" field.
func AverageRuntimeGT(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGT(FieldAverageRuntime, v))
}

// AverageRuntimeGTE applies the GTE predicate on the "average_runtime" field.
func AverageRuntimeGTE(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGTE(FieldAverageRuntime, v))
}

// AverageRuntimeLT applies the LT predicate on the "average_runtime" field.
func AverageRuntimeLT(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLT(FieldAverageRuntime, v))
}

// AverageRuntimeLTE applies the LTE predicate on the "average_runtime" field.
func AverageRuntimeLTE(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLTE(FieldAverageRuntime, v))
}

// MinRuntimeEQ applies the EQ predicate on the "min_runtime" field.
func MinRuntimeEQ(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldMinRuntime, v))
}

// MinRuntimeNEQ applies the NEQ predicate on the "min_runtime" field.
func MinRuntimeNEQ(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNEQ(FieldMinRuntime, v))
}

// MinRuntimeIn applies the In predicate on the "min_runtime" field.
func MinRuntimeIn(vs ...int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldIn(FieldMinRuntime, vs...))
}

// MinRuntimeNotIn applies the NotIn predicate on the "min_runtime" field.
func MinRuntimeNotIn(vs ...int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNotIn(FieldMinRuntime, vs...))
}

// MinRuntimeGT applies the GT predicate on the "min_runtime" field.
func MinRuntimeGT(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGT(FieldMinRuntime, v))
}

// MinRuntimeGTE applies the GTE predicate on the "min_runtime" field.
func MinRuntimeGTE(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGTE(FieldMinRuntime, v))
}

// MinRuntimeLT applies the LT predicate on the "min_runtime" field.
func MinRuntimeLT(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLT(FieldMinRuntime, v))
}

// MinRuntimeLTE applies the LTE predicate on the "min_runtime" field.
func MinRuntimeLTE(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLTE(FieldMinRuntime, v))
}

// MaxRuntimeEQ applies the EQ predicate on the "max_runtime" field.
func MaxRuntimeEQ(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldMaxRuntime, v))
}

// MaxRuntimeNEQ applies the NEQ predicate on the "max_runtime" field.
func MaxRuntimeNEQ(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNEQ(FieldMaxRuntime, v))
}

// MaxRuntimeIn applies the In predicate on the "max_runtime" field.
func MaxRuntimeIn(vs ...int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldIn(FieldMaxRuntime, vs...))
}

// MaxRuntimeNotIn applies the NotIn predicate on the "max_runtime" field.
func MaxRuntimeNotIn(vs ...int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNotIn(FieldMaxRuntime, vs...))
}

// MaxRuntimeGT applies the GT predicate on the "max_runtime" field.
func MaxRuntimeGT(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGT(FieldMaxRuntime, v))
}

// MaxRuntimeGTE applies the GTE predicate on the "max_runtime" field.
func MaxRuntimeGTE(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGTE(FieldMaxRuntime, v))
}

// MaxRuntimeLT applies the LT predicate on the "max_runtime" field.
func MaxRuntimeLT(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLT(FieldMaxRuntime, v))
}

// MaxRuntimeLTE applies the LTE predicate on the "max_runtime" field.
func MaxRuntimeLTE(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLTE(FieldMaxRuntime, v))
}

// LastRunEQ applies the EQ predicate on the "last_run" field.
func LastRunEQ(v time.Time) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldLastRun, v))
}

// LastRunNEQ applies the NEQ predicate on the "last_run" field.
func LastRunNEQ(v time.Time) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNEQ(FieldLastRun, v))
}

// LastRunIn applies the In predicate on the "last_run" field.
func LastRunIn(vs ...time.Time) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldIn(FieldLastRun, vs...))
}

// LastRunNotIn applies the NotIn predicate on the "last_run" field.
func LastRunNotIn(vs ...time.Time) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNotIn(FieldLastRun, vs...))
}

// LastRunGT applies the GT predicate on the "last_run" field.
func LastRunGT(v time.Time) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGT(FieldLastRun, v))
}

// LastRunGTE applies the GTE predicate on the "last_run" field.
func LastRunGTE(v time.Time) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGTE(FieldLastRun, v))
}

// LastRunLT applies the LT predicate on the "last_run" field.
func LastRunLT(v time.Time) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLT(FieldLastRun, v))
}

// LastRunLTE applies the LTE predicate on the "last_run" field.
func LastRunLTE(v time.Time) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLTE(FieldLastRun, v))
}

// TotalRuntimeEQ applies the EQ predicate on the "total_runtime" field.
func TotalRuntimeEQ(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldTotalRuntime, v))
}

// TotalRuntimeNEQ applies the NEQ predicate on the "total_runtime" field.
func TotalRuntimeNEQ(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNEQ(FieldTotalRuntime, v))
}

// TotalRuntimeIn applies the In predicate on the "total_runtime" field.
func TotalRuntimeIn(vs ...int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldIn(FieldTotalRuntime, vs...))
}

// TotalRuntimeNotIn applies the NotIn predicate on the "total_runtime" field.
func TotalRuntimeNotIn(vs ...int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNotIn(FieldTotalRuntime, vs...))
}

// TotalRuntimeGT applies the GT predicate on the "total_runtime" field.
func TotalRuntimeGT(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGT(FieldTotalRuntime, v))
}

// TotalRuntimeGTE applies the GTE predicate on the "total_runtime" field.
func TotalRuntimeGTE(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGTE(FieldTotalRuntime, v))
}

// TotalRuntimeLT applies the LT predicate on the "total_runtime" field.
func TotalRuntimeLT(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLT(FieldTotalRuntime, v))
}

// TotalRuntimeLTE applies the LTE predicate on the "total_runtime" field.
func TotalRuntimeLTE(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLTE(FieldTotalRuntime, v))
}

// SuccessRateEQ applies the EQ predicate on the "success_rate" field.
func SuccessRateEQ(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldEQ(FieldSuccessRate, v))
}

// SuccessRateNEQ applies the NEQ predicate on the "success_rate" field.
func SuccessRateNEQ(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNEQ(FieldSuccessRate, v))
}

// SuccessRateIn applies the In predicate on the "success_rate" field.
func SuccessRateIn(vs ...int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldIn(FieldSuccessRate, vs...))
}

// SuccessRateNotIn applies the NotIn predicate on the "success_rate" field.
func SuccessRateNotIn(vs ...int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldNotIn(FieldSuccessRate, vs...))
}

// SuccessRateGT applies the GT predicate on the "success_rate" field.
func SuccessRateGT(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGT(FieldSuccessRate, v))
}

// SuccessRateGTE applies the GTE predicate on the "success_rate" field.
func SuccessRateGTE(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldGTE(FieldSuccessRate, v))
}

// SuccessRateLT applies the LT predicate on the "success_rate" field.
func SuccessRateLT(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLT(FieldSuccessRate, v))
}

// SuccessRateLTE applies the LTE predicate on the "success_rate" field.
func SuccessRateLTE(v int) predicate.ScriptStats {
	return predicate.ScriptStats(sql.FieldLTE(FieldSuccessRate, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScriptStats) predicate.ScriptStats {
	return predicate.ScriptStats(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScriptStats) predicate.ScriptStats {
	return predicate.ScriptStats(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScriptStats) predicate.ScriptStats {
	return predicate.ScriptStats(func(s *sql.Selector) {
		p(s.Not())
	})
}
