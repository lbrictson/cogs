// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/cogs/ent/predicate"
	"github.com/lbrictson/cogs/ent/schema"
	"github.com/lbrictson/cogs/ent/script"
)

// ScriptUpdate is the builder for updating Script entities.
type ScriptUpdate struct {
	config
	hooks    []Hook
	mutation *ScriptMutation
}

// Where appends a list predicates to the ScriptUpdate builder.
func (su *ScriptUpdate) Where(ps ...predicate.Script) *ScriptUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *ScriptUpdate) SetUpdatedAt(t time.Time) *ScriptUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetName sets the "name" field.
func (su *ScriptUpdate) SetName(s string) *ScriptUpdate {
	su.mutation.SetName(s)
	return su
}

// SetDescription sets the "description" field.
func (su *ScriptUpdate) SetDescription(s string) *ScriptUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableDescription(s *string) *ScriptUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *ScriptUpdate) ClearDescription() *ScriptUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetScript sets the "script" field.
func (su *ScriptUpdate) SetScript(s string) *ScriptUpdate {
	su.mutation.SetScript(s)
	return su
}

// SetTimeoutSeconds sets the "timeout_seconds" field.
func (su *ScriptUpdate) SetTimeoutSeconds(i int) *ScriptUpdate {
	su.mutation.ResetTimeoutSeconds()
	su.mutation.SetTimeoutSeconds(i)
	return su
}

// SetNillableTimeoutSeconds sets the "timeout_seconds" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableTimeoutSeconds(i *int) *ScriptUpdate {
	if i != nil {
		su.SetTimeoutSeconds(*i)
	}
	return su
}

// AddTimeoutSeconds adds i to the "timeout_seconds" field.
func (su *ScriptUpdate) AddTimeoutSeconds(i int) *ScriptUpdate {
	su.mutation.AddTimeoutSeconds(i)
	return su
}

// SetProjectID sets the "project_id" field.
func (su *ScriptUpdate) SetProjectID(i int) *ScriptUpdate {
	su.mutation.ResetProjectID()
	su.mutation.SetProjectID(i)
	return su
}

// AddProjectID adds i to the "project_id" field.
func (su *ScriptUpdate) AddProjectID(i int) *ScriptUpdate {
	su.mutation.AddProjectID(i)
	return su
}

// SetParameters sets the "parameters" field.
func (su *ScriptUpdate) SetParameters(sio []schema.ScriptInputOptions) *ScriptUpdate {
	su.mutation.SetParameters(sio)
	return su
}

// AppendParameters appends sio to the "parameters" field.
func (su *ScriptUpdate) AppendParameters(sio []schema.ScriptInputOptions) *ScriptUpdate {
	su.mutation.AppendParameters(sio)
	return su
}

// ClearParameters clears the value of the "parameters" field.
func (su *ScriptUpdate) ClearParameters() *ScriptUpdate {
	su.mutation.ClearParameters()
	return su
}

// SetScheduleEnabled sets the "schedule_enabled" field.
func (su *ScriptUpdate) SetScheduleEnabled(b bool) *ScriptUpdate {
	su.mutation.SetScheduleEnabled(b)
	return su
}

// SetNillableScheduleEnabled sets the "schedule_enabled" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableScheduleEnabled(b *bool) *ScriptUpdate {
	if b != nil {
		su.SetScheduleEnabled(*b)
	}
	return su
}

// SetScheduleCron sets the "schedule_cron" field.
func (su *ScriptUpdate) SetScheduleCron(s string) *ScriptUpdate {
	su.mutation.SetScheduleCron(s)
	return su
}

// SetNillableScheduleCron sets the "schedule_cron" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableScheduleCron(s *string) *ScriptUpdate {
	if s != nil {
		su.SetScheduleCron(*s)
	}
	return su
}

// ClearScheduleCron clears the value of the "schedule_cron" field.
func (su *ScriptUpdate) ClearScheduleCron() *ScriptUpdate {
	su.mutation.ClearScheduleCron()
	return su
}

// SetSuccessNotificationChannelID sets the "success_notification_channel_id" field.
func (su *ScriptUpdate) SetSuccessNotificationChannelID(i int) *ScriptUpdate {
	su.mutation.ResetSuccessNotificationChannelID()
	su.mutation.SetSuccessNotificationChannelID(i)
	return su
}

// SetNillableSuccessNotificationChannelID sets the "success_notification_channel_id" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableSuccessNotificationChannelID(i *int) *ScriptUpdate {
	if i != nil {
		su.SetSuccessNotificationChannelID(*i)
	}
	return su
}

// AddSuccessNotificationChannelID adds i to the "success_notification_channel_id" field.
func (su *ScriptUpdate) AddSuccessNotificationChannelID(i int) *ScriptUpdate {
	su.mutation.AddSuccessNotificationChannelID(i)
	return su
}

// ClearSuccessNotificationChannelID clears the value of the "success_notification_channel_id" field.
func (su *ScriptUpdate) ClearSuccessNotificationChannelID() *ScriptUpdate {
	su.mutation.ClearSuccessNotificationChannelID()
	return su
}

// SetFailureNotificationChannelID sets the "failure_notification_channel_id" field.
func (su *ScriptUpdate) SetFailureNotificationChannelID(i int) *ScriptUpdate {
	su.mutation.ResetFailureNotificationChannelID()
	su.mutation.SetFailureNotificationChannelID(i)
	return su
}

// SetNillableFailureNotificationChannelID sets the "failure_notification_channel_id" field if the given value is not nil.
func (su *ScriptUpdate) SetNillableFailureNotificationChannelID(i *int) *ScriptUpdate {
	if i != nil {
		su.SetFailureNotificationChannelID(*i)
	}
	return su
}

// AddFailureNotificationChannelID adds i to the "failure_notification_channel_id" field.
func (su *ScriptUpdate) AddFailureNotificationChannelID(i int) *ScriptUpdate {
	su.mutation.AddFailureNotificationChannelID(i)
	return su
}

// ClearFailureNotificationChannelID clears the value of the "failure_notification_channel_id" field.
func (su *ScriptUpdate) ClearFailureNotificationChannelID() *ScriptUpdate {
	su.mutation.ClearFailureNotificationChannelID()
	return su
}

// Mutation returns the ScriptMutation object of the builder.
func (su *ScriptUpdate) Mutation() *ScriptMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ScriptUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScriptUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScriptUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScriptUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ScriptUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := script.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

func (su *ScriptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(script.Table, script.Columns, sqlgraph.NewFieldSpec(script.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(script.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(script.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(script.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(script.FieldDescription, field.TypeString)
	}
	if value, ok := su.mutation.Script(); ok {
		_spec.SetField(script.FieldScript, field.TypeString, value)
	}
	if value, ok := su.mutation.TimeoutSeconds(); ok {
		_spec.SetField(script.FieldTimeoutSeconds, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedTimeoutSeconds(); ok {
		_spec.AddField(script.FieldTimeoutSeconds, field.TypeInt, value)
	}
	if value, ok := su.mutation.ProjectID(); ok {
		_spec.SetField(script.FieldProjectID, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedProjectID(); ok {
		_spec.AddField(script.FieldProjectID, field.TypeInt, value)
	}
	if value, ok := su.mutation.Parameters(); ok {
		_spec.SetField(script.FieldParameters, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedParameters(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, script.FieldParameters, value)
		})
	}
	if su.mutation.ParametersCleared() {
		_spec.ClearField(script.FieldParameters, field.TypeJSON)
	}
	if value, ok := su.mutation.ScheduleEnabled(); ok {
		_spec.SetField(script.FieldScheduleEnabled, field.TypeBool, value)
	}
	if value, ok := su.mutation.ScheduleCron(); ok {
		_spec.SetField(script.FieldScheduleCron, field.TypeString, value)
	}
	if su.mutation.ScheduleCronCleared() {
		_spec.ClearField(script.FieldScheduleCron, field.TypeString)
	}
	if value, ok := su.mutation.SuccessNotificationChannelID(); ok {
		_spec.SetField(script.FieldSuccessNotificationChannelID, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedSuccessNotificationChannelID(); ok {
		_spec.AddField(script.FieldSuccessNotificationChannelID, field.TypeInt, value)
	}
	if su.mutation.SuccessNotificationChannelIDCleared() {
		_spec.ClearField(script.FieldSuccessNotificationChannelID, field.TypeInt)
	}
	if value, ok := su.mutation.FailureNotificationChannelID(); ok {
		_spec.SetField(script.FieldFailureNotificationChannelID, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedFailureNotificationChannelID(); ok {
		_spec.AddField(script.FieldFailureNotificationChannelID, field.TypeInt, value)
	}
	if su.mutation.FailureNotificationChannelIDCleared() {
		_spec.ClearField(script.FieldFailureNotificationChannelID, field.TypeInt)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{script.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ScriptUpdateOne is the builder for updating a single Script entity.
type ScriptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScriptMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *ScriptUpdateOne) SetUpdatedAt(t time.Time) *ScriptUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetName sets the "name" field.
func (suo *ScriptUpdateOne) SetName(s string) *ScriptUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetDescription sets the "description" field.
func (suo *ScriptUpdateOne) SetDescription(s string) *ScriptUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableDescription(s *string) *ScriptUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *ScriptUpdateOne) ClearDescription() *ScriptUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetScript sets the "script" field.
func (suo *ScriptUpdateOne) SetScript(s string) *ScriptUpdateOne {
	suo.mutation.SetScript(s)
	return suo
}

// SetTimeoutSeconds sets the "timeout_seconds" field.
func (suo *ScriptUpdateOne) SetTimeoutSeconds(i int) *ScriptUpdateOne {
	suo.mutation.ResetTimeoutSeconds()
	suo.mutation.SetTimeoutSeconds(i)
	return suo
}

// SetNillableTimeoutSeconds sets the "timeout_seconds" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableTimeoutSeconds(i *int) *ScriptUpdateOne {
	if i != nil {
		suo.SetTimeoutSeconds(*i)
	}
	return suo
}

// AddTimeoutSeconds adds i to the "timeout_seconds" field.
func (suo *ScriptUpdateOne) AddTimeoutSeconds(i int) *ScriptUpdateOne {
	suo.mutation.AddTimeoutSeconds(i)
	return suo
}

// SetProjectID sets the "project_id" field.
func (suo *ScriptUpdateOne) SetProjectID(i int) *ScriptUpdateOne {
	suo.mutation.ResetProjectID()
	suo.mutation.SetProjectID(i)
	return suo
}

// AddProjectID adds i to the "project_id" field.
func (suo *ScriptUpdateOne) AddProjectID(i int) *ScriptUpdateOne {
	suo.mutation.AddProjectID(i)
	return suo
}

// SetParameters sets the "parameters" field.
func (suo *ScriptUpdateOne) SetParameters(sio []schema.ScriptInputOptions) *ScriptUpdateOne {
	suo.mutation.SetParameters(sio)
	return suo
}

// AppendParameters appends sio to the "parameters" field.
func (suo *ScriptUpdateOne) AppendParameters(sio []schema.ScriptInputOptions) *ScriptUpdateOne {
	suo.mutation.AppendParameters(sio)
	return suo
}

// ClearParameters clears the value of the "parameters" field.
func (suo *ScriptUpdateOne) ClearParameters() *ScriptUpdateOne {
	suo.mutation.ClearParameters()
	return suo
}

// SetScheduleEnabled sets the "schedule_enabled" field.
func (suo *ScriptUpdateOne) SetScheduleEnabled(b bool) *ScriptUpdateOne {
	suo.mutation.SetScheduleEnabled(b)
	return suo
}

// SetNillableScheduleEnabled sets the "schedule_enabled" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableScheduleEnabled(b *bool) *ScriptUpdateOne {
	if b != nil {
		suo.SetScheduleEnabled(*b)
	}
	return suo
}

// SetScheduleCron sets the "schedule_cron" field.
func (suo *ScriptUpdateOne) SetScheduleCron(s string) *ScriptUpdateOne {
	suo.mutation.SetScheduleCron(s)
	return suo
}

// SetNillableScheduleCron sets the "schedule_cron" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableScheduleCron(s *string) *ScriptUpdateOne {
	if s != nil {
		suo.SetScheduleCron(*s)
	}
	return suo
}

// ClearScheduleCron clears the value of the "schedule_cron" field.
func (suo *ScriptUpdateOne) ClearScheduleCron() *ScriptUpdateOne {
	suo.mutation.ClearScheduleCron()
	return suo
}

// SetSuccessNotificationChannelID sets the "success_notification_channel_id" field.
func (suo *ScriptUpdateOne) SetSuccessNotificationChannelID(i int) *ScriptUpdateOne {
	suo.mutation.ResetSuccessNotificationChannelID()
	suo.mutation.SetSuccessNotificationChannelID(i)
	return suo
}

// SetNillableSuccessNotificationChannelID sets the "success_notification_channel_id" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableSuccessNotificationChannelID(i *int) *ScriptUpdateOne {
	if i != nil {
		suo.SetSuccessNotificationChannelID(*i)
	}
	return suo
}

// AddSuccessNotificationChannelID adds i to the "success_notification_channel_id" field.
func (suo *ScriptUpdateOne) AddSuccessNotificationChannelID(i int) *ScriptUpdateOne {
	suo.mutation.AddSuccessNotificationChannelID(i)
	return suo
}

// ClearSuccessNotificationChannelID clears the value of the "success_notification_channel_id" field.
func (suo *ScriptUpdateOne) ClearSuccessNotificationChannelID() *ScriptUpdateOne {
	suo.mutation.ClearSuccessNotificationChannelID()
	return suo
}

// SetFailureNotificationChannelID sets the "failure_notification_channel_id" field.
func (suo *ScriptUpdateOne) SetFailureNotificationChannelID(i int) *ScriptUpdateOne {
	suo.mutation.ResetFailureNotificationChannelID()
	suo.mutation.SetFailureNotificationChannelID(i)
	return suo
}

// SetNillableFailureNotificationChannelID sets the "failure_notification_channel_id" field if the given value is not nil.
func (suo *ScriptUpdateOne) SetNillableFailureNotificationChannelID(i *int) *ScriptUpdateOne {
	if i != nil {
		suo.SetFailureNotificationChannelID(*i)
	}
	return suo
}

// AddFailureNotificationChannelID adds i to the "failure_notification_channel_id" field.
func (suo *ScriptUpdateOne) AddFailureNotificationChannelID(i int) *ScriptUpdateOne {
	suo.mutation.AddFailureNotificationChannelID(i)
	return suo
}

// ClearFailureNotificationChannelID clears the value of the "failure_notification_channel_id" field.
func (suo *ScriptUpdateOne) ClearFailureNotificationChannelID() *ScriptUpdateOne {
	suo.mutation.ClearFailureNotificationChannelID()
	return suo
}

// Mutation returns the ScriptMutation object of the builder.
func (suo *ScriptUpdateOne) Mutation() *ScriptMutation {
	return suo.mutation
}

// Where appends a list predicates to the ScriptUpdate builder.
func (suo *ScriptUpdateOne) Where(ps ...predicate.Script) *ScriptUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ScriptUpdateOne) Select(field string, fields ...string) *ScriptUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Script entity.
func (suo *ScriptUpdateOne) Save(ctx context.Context) (*Script, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScriptUpdateOne) SaveX(ctx context.Context) *Script {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ScriptUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScriptUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ScriptUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := script.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

func (suo *ScriptUpdateOne) sqlSave(ctx context.Context) (_node *Script, err error) {
	_spec := sqlgraph.NewUpdateSpec(script.Table, script.Columns, sqlgraph.NewFieldSpec(script.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Script.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, script.FieldID)
		for _, f := range fields {
			if !script.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != script.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(script.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(script.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(script.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(script.FieldDescription, field.TypeString)
	}
	if value, ok := suo.mutation.Script(); ok {
		_spec.SetField(script.FieldScript, field.TypeString, value)
	}
	if value, ok := suo.mutation.TimeoutSeconds(); ok {
		_spec.SetField(script.FieldTimeoutSeconds, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedTimeoutSeconds(); ok {
		_spec.AddField(script.FieldTimeoutSeconds, field.TypeInt, value)
	}
	if value, ok := suo.mutation.ProjectID(); ok {
		_spec.SetField(script.FieldProjectID, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedProjectID(); ok {
		_spec.AddField(script.FieldProjectID, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Parameters(); ok {
		_spec.SetField(script.FieldParameters, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedParameters(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, script.FieldParameters, value)
		})
	}
	if suo.mutation.ParametersCleared() {
		_spec.ClearField(script.FieldParameters, field.TypeJSON)
	}
	if value, ok := suo.mutation.ScheduleEnabled(); ok {
		_spec.SetField(script.FieldScheduleEnabled, field.TypeBool, value)
	}
	if value, ok := suo.mutation.ScheduleCron(); ok {
		_spec.SetField(script.FieldScheduleCron, field.TypeString, value)
	}
	if suo.mutation.ScheduleCronCleared() {
		_spec.ClearField(script.FieldScheduleCron, field.TypeString)
	}
	if value, ok := suo.mutation.SuccessNotificationChannelID(); ok {
		_spec.SetField(script.FieldSuccessNotificationChannelID, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedSuccessNotificationChannelID(); ok {
		_spec.AddField(script.FieldSuccessNotificationChannelID, field.TypeInt, value)
	}
	if suo.mutation.SuccessNotificationChannelIDCleared() {
		_spec.ClearField(script.FieldSuccessNotificationChannelID, field.TypeInt)
	}
	if value, ok := suo.mutation.FailureNotificationChannelID(); ok {
		_spec.SetField(script.FieldFailureNotificationChannelID, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedFailureNotificationChannelID(); ok {
		_spec.AddField(script.FieldFailureNotificationChannelID, field.TypeInt, value)
	}
	if suo.mutation.FailureNotificationChannelIDCleared() {
		_spec.ClearField(script.FieldFailureNotificationChannelID, field.TypeInt)
	}
	_node = &Script{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{script.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
