// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/cogs/ent/access"
)

// AccessCreate is the builder for creating a Access entity.
type AccessCreate struct {
	config
	mutation *AccessMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ac *AccessCreate) SetCreatedAt(t time.Time) *AccessCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AccessCreate) SetNillableCreatedAt(t *time.Time) *AccessCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AccessCreate) SetUpdatedAt(t time.Time) *AccessCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AccessCreate) SetNillableUpdatedAt(t *time.Time) *AccessCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetUserID sets the "user_id" field.
func (ac *AccessCreate) SetUserID(i int) *AccessCreate {
	ac.mutation.SetUserID(i)
	return ac
}

// SetProjectID sets the "project_id" field.
func (ac *AccessCreate) SetProjectID(i int) *AccessCreate {
	ac.mutation.SetProjectID(i)
	return ac
}

// SetRole sets the "role" field.
func (ac *AccessCreate) SetRole(a access.Role) *AccessCreate {
	ac.mutation.SetRole(a)
	return ac
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (ac *AccessCreate) SetNillableRole(a *access.Role) *AccessCreate {
	if a != nil {
		ac.SetRole(*a)
	}
	return ac
}

// Mutation returns the AccessMutation object of the builder.
func (ac *AccessCreate) Mutation() *AccessMutation {
	return ac.mutation
}

// Save creates the Access in the database.
func (ac *AccessCreate) Save(ctx context.Context) (*Access, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AccessCreate) SaveX(ctx context.Context) *Access {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AccessCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AccessCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AccessCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := access.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := access.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.Role(); !ok {
		v := access.DefaultRole
		ac.mutation.SetRole(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AccessCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Access.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Access.updated_at"`)}
	}
	if _, ok := ac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Access.user_id"`)}
	}
	if _, ok := ac.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "Access.project_id"`)}
	}
	if _, ok := ac.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "Access.role"`)}
	}
	if v, ok := ac.mutation.Role(); ok {
		if err := access.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "Access.role": %w`, err)}
		}
	}
	return nil
}

func (ac *AccessCreate) sqlSave(ctx context.Context) (*Access, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AccessCreate) createSpec() (*Access, *sqlgraph.CreateSpec) {
	var (
		_node = &Access{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(access.Table, sqlgraph.NewFieldSpec(access.FieldID, field.TypeInt))
	)
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(access.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(access.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.UserID(); ok {
		_spec.SetField(access.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := ac.mutation.ProjectID(); ok {
		_spec.SetField(access.FieldProjectID, field.TypeInt, value)
		_node.ProjectID = value
	}
	if value, ok := ac.mutation.Role(); ok {
		_spec.SetField(access.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	return _node, _spec
}

// AccessCreateBulk is the builder for creating many Access entities in bulk.
type AccessCreateBulk struct {
	config
	builders []*AccessCreate
}

// Save creates the Access entities in the database.
func (acb *AccessCreateBulk) Save(ctx context.Context) ([]*Access, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Access, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AccessCreateBulk) SaveX(ctx context.Context) []*Access {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AccessCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AccessCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
