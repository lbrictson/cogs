// Code generated by ent, DO NOT EDIT.

package history

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the history type in the database.
	Label = "history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldRunID holds the string denoting the run_id field in the database.
	FieldRunID = "run_id"
	// FieldSuccess holds the string denoting the success field in the database.
	FieldSuccess = "success"
	// FieldExitCode holds the string denoting the exit_code field in the database.
	FieldExitCode = "exit_code"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldTrigger holds the string denoting the trigger field in the database.
	FieldTrigger = "trigger"
	// FieldOutput holds the string denoting the output field in the database.
	FieldOutput = "output"
	// FieldTriggeredBy holds the string denoting the triggered_by field in the database.
	FieldTriggeredBy = "triggered_by"
	// FieldScriptID holds the string denoting the script_id field in the database.
	FieldScriptID = "script_id"
	// FieldArguments holds the string denoting the arguments field in the database.
	FieldArguments = "arguments"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// Table holds the table name of the history in the database.
	Table = "histories"
)

// Columns holds all SQL columns for history fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldRunID,
	FieldSuccess,
	FieldExitCode,
	FieldDuration,
	FieldTrigger,
	FieldOutput,
	FieldTriggeredBy,
	FieldScriptID,
	FieldArguments,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
)

// OrderOption defines the ordering options for the History queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByRunID orders the results by the run_id field.
func ByRunID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRunID, opts...).ToFunc()
}

// BySuccess orders the results by the success field.
func BySuccess(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuccess, opts...).ToFunc()
}

// ByExitCode orders the results by the exit_code field.
func ByExitCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExitCode, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByTrigger orders the results by the trigger field.
func ByTrigger(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrigger, opts...).ToFunc()
}

// ByOutput orders the results by the output field.
func ByOutput(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutput, opts...).ToFunc()
}

// ByTriggeredBy orders the results by the triggered_by field.
func ByTriggeredBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTriggeredBy, opts...).ToFunc()
}

// ByScriptID orders the results by the script_id field.
func ByScriptID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScriptID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}
