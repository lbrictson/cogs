// Code generated by ent, DO NOT EDIT.

package history

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lbrictson/cogs/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.History {
	return predicate.History(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.History {
	return predicate.History(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.History {
	return predicate.History(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.History {
	return predicate.History(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.History {
	return predicate.History(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.History {
	return predicate.History(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.History {
	return predicate.History(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.History {
	return predicate.History(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.History {
	return predicate.History(sql.FieldEQ(FieldUpdatedAt, v))
}

// RunID applies equality check predicate on the "run_id" field. It's identical to RunIDEQ.
func RunID(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldRunID, v))
}

// Success applies equality check predicate on the "success" field. It's identical to SuccessEQ.
func Success(v bool) predicate.History {
	return predicate.History(sql.FieldEQ(FieldSuccess, v))
}

// ExitCode applies equality check predicate on the "exit_code" field. It's identical to ExitCodeEQ.
func ExitCode(v int) predicate.History {
	return predicate.History(sql.FieldEQ(FieldExitCode, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.History {
	return predicate.History(sql.FieldEQ(FieldDuration, v))
}

// Trigger applies equality check predicate on the "trigger" field. It's identical to TriggerEQ.
func Trigger(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldTrigger, v))
}

// Output applies equality check predicate on the "output" field. It's identical to OutputEQ.
func Output(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldOutput, v))
}

// TriggeredBy applies equality check predicate on the "triggered_by" field. It's identical to TriggeredByEQ.
func TriggeredBy(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldTriggeredBy, v))
}

// ScriptID applies equality check predicate on the "script_id" field. It's identical to ScriptIDEQ.
func ScriptID(v int) predicate.History {
	return predicate.History(sql.FieldEQ(FieldScriptID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.History {
	return predicate.History(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.History {
	return predicate.History(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.History {
	return predicate.History(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.History {
	return predicate.History(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.History {
	return predicate.History(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.History {
	return predicate.History(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.History {
	return predicate.History(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.History {
	return predicate.History(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.History {
	return predicate.History(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.History {
	return predicate.History(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.History {
	return predicate.History(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.History {
	return predicate.History(sql.FieldLTE(FieldUpdatedAt, v))
}

// RunIDEQ applies the EQ predicate on the "run_id" field.
func RunIDEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldRunID, v))
}

// RunIDNEQ applies the NEQ predicate on the "run_id" field.
func RunIDNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldRunID, v))
}

// RunIDIn applies the In predicate on the "run_id" field.
func RunIDIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldRunID, vs...))
}

// RunIDNotIn applies the NotIn predicate on the "run_id" field.
func RunIDNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldRunID, vs...))
}

// RunIDGT applies the GT predicate on the "run_id" field.
func RunIDGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldRunID, v))
}

// RunIDGTE applies the GTE predicate on the "run_id" field.
func RunIDGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldRunID, v))
}

// RunIDLT applies the LT predicate on the "run_id" field.
func RunIDLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldRunID, v))
}

// RunIDLTE applies the LTE predicate on the "run_id" field.
func RunIDLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldRunID, v))
}

// RunIDContains applies the Contains predicate on the "run_id" field.
func RunIDContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldRunID, v))
}

// RunIDHasPrefix applies the HasPrefix predicate on the "run_id" field.
func RunIDHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldRunID, v))
}

// RunIDHasSuffix applies the HasSuffix predicate on the "run_id" field.
func RunIDHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldRunID, v))
}

// RunIDEqualFold applies the EqualFold predicate on the "run_id" field.
func RunIDEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldRunID, v))
}

// RunIDContainsFold applies the ContainsFold predicate on the "run_id" field.
func RunIDContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldRunID, v))
}

// SuccessEQ applies the EQ predicate on the "success" field.
func SuccessEQ(v bool) predicate.History {
	return predicate.History(sql.FieldEQ(FieldSuccess, v))
}

// SuccessNEQ applies the NEQ predicate on the "success" field.
func SuccessNEQ(v bool) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldSuccess, v))
}

// ExitCodeEQ applies the EQ predicate on the "exit_code" field.
func ExitCodeEQ(v int) predicate.History {
	return predicate.History(sql.FieldEQ(FieldExitCode, v))
}

// ExitCodeNEQ applies the NEQ predicate on the "exit_code" field.
func ExitCodeNEQ(v int) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldExitCode, v))
}

// ExitCodeIn applies the In predicate on the "exit_code" field.
func ExitCodeIn(vs ...int) predicate.History {
	return predicate.History(sql.FieldIn(FieldExitCode, vs...))
}

// ExitCodeNotIn applies the NotIn predicate on the "exit_code" field.
func ExitCodeNotIn(vs ...int) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldExitCode, vs...))
}

// ExitCodeGT applies the GT predicate on the "exit_code" field.
func ExitCodeGT(v int) predicate.History {
	return predicate.History(sql.FieldGT(FieldExitCode, v))
}

// ExitCodeGTE applies the GTE predicate on the "exit_code" field.
func ExitCodeGTE(v int) predicate.History {
	return predicate.History(sql.FieldGTE(FieldExitCode, v))
}

// ExitCodeLT applies the LT predicate on the "exit_code" field.
func ExitCodeLT(v int) predicate.History {
	return predicate.History(sql.FieldLT(FieldExitCode, v))
}

// ExitCodeLTE applies the LTE predicate on the "exit_code" field.
func ExitCodeLTE(v int) predicate.History {
	return predicate.History(sql.FieldLTE(FieldExitCode, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.History {
	return predicate.History(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.History {
	return predicate.History(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.History {
	return predicate.History(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.History {
	return predicate.History(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.History {
	return predicate.History(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.History {
	return predicate.History(sql.FieldLTE(FieldDuration, v))
}

// TriggerEQ applies the EQ predicate on the "trigger" field.
func TriggerEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldTrigger, v))
}

// TriggerNEQ applies the NEQ predicate on the "trigger" field.
func TriggerNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldTrigger, v))
}

// TriggerIn applies the In predicate on the "trigger" field.
func TriggerIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldTrigger, vs...))
}

// TriggerNotIn applies the NotIn predicate on the "trigger" field.
func TriggerNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldTrigger, vs...))
}

// TriggerGT applies the GT predicate on the "trigger" field.
func TriggerGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldTrigger, v))
}

// TriggerGTE applies the GTE predicate on the "trigger" field.
func TriggerGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldTrigger, v))
}

// TriggerLT applies the LT predicate on the "trigger" field.
func TriggerLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldTrigger, v))
}

// TriggerLTE applies the LTE predicate on the "trigger" field.
func TriggerLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldTrigger, v))
}

// TriggerContains applies the Contains predicate on the "trigger" field.
func TriggerContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldTrigger, v))
}

// TriggerHasPrefix applies the HasPrefix predicate on the "trigger" field.
func TriggerHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldTrigger, v))
}

// TriggerHasSuffix applies the HasSuffix predicate on the "trigger" field.
func TriggerHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldTrigger, v))
}

// TriggerEqualFold applies the EqualFold predicate on the "trigger" field.
func TriggerEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldTrigger, v))
}

// TriggerContainsFold applies the ContainsFold predicate on the "trigger" field.
func TriggerContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldTrigger, v))
}

// OutputEQ applies the EQ predicate on the "output" field.
func OutputEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldOutput, v))
}

// OutputNEQ applies the NEQ predicate on the "output" field.
func OutputNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldOutput, v))
}

// OutputIn applies the In predicate on the "output" field.
func OutputIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldOutput, vs...))
}

// OutputNotIn applies the NotIn predicate on the "output" field.
func OutputNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldOutput, vs...))
}

// OutputGT applies the GT predicate on the "output" field.
func OutputGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldOutput, v))
}

// OutputGTE applies the GTE predicate on the "output" field.
func OutputGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldOutput, v))
}

// OutputLT applies the LT predicate on the "output" field.
func OutputLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldOutput, v))
}

// OutputLTE applies the LTE predicate on the "output" field.
func OutputLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldOutput, v))
}

// OutputContains applies the Contains predicate on the "output" field.
func OutputContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldOutput, v))
}

// OutputHasPrefix applies the HasPrefix predicate on the "output" field.
func OutputHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldOutput, v))
}

// OutputHasSuffix applies the HasSuffix predicate on the "output" field.
func OutputHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldOutput, v))
}

// OutputEqualFold applies the EqualFold predicate on the "output" field.
func OutputEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldOutput, v))
}

// OutputContainsFold applies the ContainsFold predicate on the "output" field.
func OutputContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldOutput, v))
}

// TriggeredByEQ applies the EQ predicate on the "triggered_by" field.
func TriggeredByEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldTriggeredBy, v))
}

// TriggeredByNEQ applies the NEQ predicate on the "triggered_by" field.
func TriggeredByNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldTriggeredBy, v))
}

// TriggeredByIn applies the In predicate on the "triggered_by" field.
func TriggeredByIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldTriggeredBy, vs...))
}

// TriggeredByNotIn applies the NotIn predicate on the "triggered_by" field.
func TriggeredByNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldTriggeredBy, vs...))
}

// TriggeredByGT applies the GT predicate on the "triggered_by" field.
func TriggeredByGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldTriggeredBy, v))
}

// TriggeredByGTE applies the GTE predicate on the "triggered_by" field.
func TriggeredByGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldTriggeredBy, v))
}

// TriggeredByLT applies the LT predicate on the "triggered_by" field.
func TriggeredByLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldTriggeredBy, v))
}

// TriggeredByLTE applies the LTE predicate on the "triggered_by" field.
func TriggeredByLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldTriggeredBy, v))
}

// TriggeredByContains applies the Contains predicate on the "triggered_by" field.
func TriggeredByContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldTriggeredBy, v))
}

// TriggeredByHasPrefix applies the HasPrefix predicate on the "triggered_by" field.
func TriggeredByHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldTriggeredBy, v))
}

// TriggeredByHasSuffix applies the HasSuffix predicate on the "triggered_by" field.
func TriggeredByHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldTriggeredBy, v))
}

// TriggeredByEqualFold applies the EqualFold predicate on the "triggered_by" field.
func TriggeredByEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldTriggeredBy, v))
}

// TriggeredByContainsFold applies the ContainsFold predicate on the "triggered_by" field.
func TriggeredByContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldTriggeredBy, v))
}

// ScriptIDEQ applies the EQ predicate on the "script_id" field.
func ScriptIDEQ(v int) predicate.History {
	return predicate.History(sql.FieldEQ(FieldScriptID, v))
}

// ScriptIDNEQ applies the NEQ predicate on the "script_id" field.
func ScriptIDNEQ(v int) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldScriptID, v))
}

// ScriptIDIn applies the In predicate on the "script_id" field.
func ScriptIDIn(vs ...int) predicate.History {
	return predicate.History(sql.FieldIn(FieldScriptID, vs...))
}

// ScriptIDNotIn applies the NotIn predicate on the "script_id" field.
func ScriptIDNotIn(vs ...int) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldScriptID, vs...))
}

// ScriptIDGT applies the GT predicate on the "script_id" field.
func ScriptIDGT(v int) predicate.History {
	return predicate.History(sql.FieldGT(FieldScriptID, v))
}

// ScriptIDGTE applies the GTE predicate on the "script_id" field.
func ScriptIDGTE(v int) predicate.History {
	return predicate.History(sql.FieldGTE(FieldScriptID, v))
}

// ScriptIDLT applies the LT predicate on the "script_id" field.
func ScriptIDLT(v int) predicate.History {
	return predicate.History(sql.FieldLT(FieldScriptID, v))
}

// ScriptIDLTE applies the LTE predicate on the "script_id" field.
func ScriptIDLTE(v int) predicate.History {
	return predicate.History(sql.FieldLTE(FieldScriptID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldStatus, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.History) predicate.History {
	return predicate.History(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.History) predicate.History {
	return predicate.History(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.History) predicate.History {
	return predicate.History(func(s *sql.Selector) {
		p(s.Not())
	})
}
