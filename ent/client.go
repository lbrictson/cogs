// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/lbrictson/cogs/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/lbrictson/cogs/ent/access"
	"github.com/lbrictson/cogs/ent/history"
	"github.com/lbrictson/cogs/ent/notificationchannel"
	"github.com/lbrictson/cogs/ent/project"
	"github.com/lbrictson/cogs/ent/script"
	"github.com/lbrictson/cogs/ent/scriptstats"
	"github.com/lbrictson/cogs/ent/secret"
	"github.com/lbrictson/cogs/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Access is the client for interacting with the Access builders.
	Access *AccessClient
	// History is the client for interacting with the History builders.
	History *HistoryClient
	// NotificationChannel is the client for interacting with the NotificationChannel builders.
	NotificationChannel *NotificationChannelClient
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// Script is the client for interacting with the Script builders.
	Script *ScriptClient
	// ScriptStats is the client for interacting with the ScriptStats builders.
	ScriptStats *ScriptStatsClient
	// Secret is the client for interacting with the Secret builders.
	Secret *SecretClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Access = NewAccessClient(c.config)
	c.History = NewHistoryClient(c.config)
	c.NotificationChannel = NewNotificationChannelClient(c.config)
	c.Project = NewProjectClient(c.config)
	c.Script = NewScriptClient(c.config)
	c.ScriptStats = NewScriptStatsClient(c.config)
	c.Secret = NewSecretClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Access:              NewAccessClient(cfg),
		History:             NewHistoryClient(cfg),
		NotificationChannel: NewNotificationChannelClient(cfg),
		Project:             NewProjectClient(cfg),
		Script:              NewScriptClient(cfg),
		ScriptStats:         NewScriptStatsClient(cfg),
		Secret:              NewSecretClient(cfg),
		User:                NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Access:              NewAccessClient(cfg),
		History:             NewHistoryClient(cfg),
		NotificationChannel: NewNotificationChannelClient(cfg),
		Project:             NewProjectClient(cfg),
		Script:              NewScriptClient(cfg),
		ScriptStats:         NewScriptStatsClient(cfg),
		Secret:              NewSecretClient(cfg),
		User:                NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Access.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Access, c.History, c.NotificationChannel, c.Project, c.Script, c.ScriptStats,
		c.Secret, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Access, c.History, c.NotificationChannel, c.Project, c.Script, c.ScriptStats,
		c.Secret, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AccessMutation:
		return c.Access.mutate(ctx, m)
	case *HistoryMutation:
		return c.History.mutate(ctx, m)
	case *NotificationChannelMutation:
		return c.NotificationChannel.mutate(ctx, m)
	case *ProjectMutation:
		return c.Project.mutate(ctx, m)
	case *ScriptMutation:
		return c.Script.mutate(ctx, m)
	case *ScriptStatsMutation:
		return c.ScriptStats.mutate(ctx, m)
	case *SecretMutation:
		return c.Secret.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AccessClient is a client for the Access schema.
type AccessClient struct {
	config
}

// NewAccessClient returns a client for the Access from the given config.
func NewAccessClient(c config) *AccessClient {
	return &AccessClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `access.Hooks(f(g(h())))`.
func (c *AccessClient) Use(hooks ...Hook) {
	c.hooks.Access = append(c.hooks.Access, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `access.Intercept(f(g(h())))`.
func (c *AccessClient) Intercept(interceptors ...Interceptor) {
	c.inters.Access = append(c.inters.Access, interceptors...)
}

// Create returns a builder for creating a Access entity.
func (c *AccessClient) Create() *AccessCreate {
	mutation := newAccessMutation(c.config, OpCreate)
	return &AccessCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Access entities.
func (c *AccessClient) CreateBulk(builders ...*AccessCreate) *AccessCreateBulk {
	return &AccessCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Access.
func (c *AccessClient) Update() *AccessUpdate {
	mutation := newAccessMutation(c.config, OpUpdate)
	return &AccessUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccessClient) UpdateOne(a *Access) *AccessUpdateOne {
	mutation := newAccessMutation(c.config, OpUpdateOne, withAccess(a))
	return &AccessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccessClient) UpdateOneID(id int) *AccessUpdateOne {
	mutation := newAccessMutation(c.config, OpUpdateOne, withAccessID(id))
	return &AccessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Access.
func (c *AccessClient) Delete() *AccessDelete {
	mutation := newAccessMutation(c.config, OpDelete)
	return &AccessDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccessClient) DeleteOne(a *Access) *AccessDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AccessClient) DeleteOneID(id int) *AccessDeleteOne {
	builder := c.Delete().Where(access.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccessDeleteOne{builder}
}

// Query returns a query builder for Access.
func (c *AccessClient) Query() *AccessQuery {
	return &AccessQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAccess},
		inters: c.Interceptors(),
	}
}

// Get returns a Access entity by its id.
func (c *AccessClient) Get(ctx context.Context, id int) (*Access, error) {
	return c.Query().Where(access.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccessClient) GetX(ctx context.Context, id int) *Access {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AccessClient) Hooks() []Hook {
	return c.hooks.Access
}

// Interceptors returns the client interceptors.
func (c *AccessClient) Interceptors() []Interceptor {
	return c.inters.Access
}

func (c *AccessClient) mutate(ctx context.Context, m *AccessMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AccessCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AccessUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AccessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AccessDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Access mutation op: %q", m.Op())
	}
}

// HistoryClient is a client for the History schema.
type HistoryClient struct {
	config
}

// NewHistoryClient returns a client for the History from the given config.
func NewHistoryClient(c config) *HistoryClient {
	return &HistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `history.Hooks(f(g(h())))`.
func (c *HistoryClient) Use(hooks ...Hook) {
	c.hooks.History = append(c.hooks.History, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `history.Intercept(f(g(h())))`.
func (c *HistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.History = append(c.inters.History, interceptors...)
}

// Create returns a builder for creating a History entity.
func (c *HistoryClient) Create() *HistoryCreate {
	mutation := newHistoryMutation(c.config, OpCreate)
	return &HistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of History entities.
func (c *HistoryClient) CreateBulk(builders ...*HistoryCreate) *HistoryCreateBulk {
	return &HistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for History.
func (c *HistoryClient) Update() *HistoryUpdate {
	mutation := newHistoryMutation(c.config, OpUpdate)
	return &HistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HistoryClient) UpdateOne(h *History) *HistoryUpdateOne {
	mutation := newHistoryMutation(c.config, OpUpdateOne, withHistory(h))
	return &HistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HistoryClient) UpdateOneID(id int) *HistoryUpdateOne {
	mutation := newHistoryMutation(c.config, OpUpdateOne, withHistoryID(id))
	return &HistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for History.
func (c *HistoryClient) Delete() *HistoryDelete {
	mutation := newHistoryMutation(c.config, OpDelete)
	return &HistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HistoryClient) DeleteOne(h *History) *HistoryDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HistoryClient) DeleteOneID(id int) *HistoryDeleteOne {
	builder := c.Delete().Where(history.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HistoryDeleteOne{builder}
}

// Query returns a query builder for History.
func (c *HistoryClient) Query() *HistoryQuery {
	return &HistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a History entity by its id.
func (c *HistoryClient) Get(ctx context.Context, id int) (*History, error) {
	return c.Query().Where(history.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HistoryClient) GetX(ctx context.Context, id int) *History {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *HistoryClient) Hooks() []Hook {
	return c.hooks.History
}

// Interceptors returns the client interceptors.
func (c *HistoryClient) Interceptors() []Interceptor {
	return c.inters.History
}

func (c *HistoryClient) mutate(ctx context.Context, m *HistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown History mutation op: %q", m.Op())
	}
}

// NotificationChannelClient is a client for the NotificationChannel schema.
type NotificationChannelClient struct {
	config
}

// NewNotificationChannelClient returns a client for the NotificationChannel from the given config.
func NewNotificationChannelClient(c config) *NotificationChannelClient {
	return &NotificationChannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notificationchannel.Hooks(f(g(h())))`.
func (c *NotificationChannelClient) Use(hooks ...Hook) {
	c.hooks.NotificationChannel = append(c.hooks.NotificationChannel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notificationchannel.Intercept(f(g(h())))`.
func (c *NotificationChannelClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotificationChannel = append(c.inters.NotificationChannel, interceptors...)
}

// Create returns a builder for creating a NotificationChannel entity.
func (c *NotificationChannelClient) Create() *NotificationChannelCreate {
	mutation := newNotificationChannelMutation(c.config, OpCreate)
	return &NotificationChannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotificationChannel entities.
func (c *NotificationChannelClient) CreateBulk(builders ...*NotificationChannelCreate) *NotificationChannelCreateBulk {
	return &NotificationChannelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotificationChannel.
func (c *NotificationChannelClient) Update() *NotificationChannelUpdate {
	mutation := newNotificationChannelMutation(c.config, OpUpdate)
	return &NotificationChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationChannelClient) UpdateOne(nc *NotificationChannel) *NotificationChannelUpdateOne {
	mutation := newNotificationChannelMutation(c.config, OpUpdateOne, withNotificationChannel(nc))
	return &NotificationChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationChannelClient) UpdateOneID(id int) *NotificationChannelUpdateOne {
	mutation := newNotificationChannelMutation(c.config, OpUpdateOne, withNotificationChannelID(id))
	return &NotificationChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotificationChannel.
func (c *NotificationChannelClient) Delete() *NotificationChannelDelete {
	mutation := newNotificationChannelMutation(c.config, OpDelete)
	return &NotificationChannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationChannelClient) DeleteOne(nc *NotificationChannel) *NotificationChannelDeleteOne {
	return c.DeleteOneID(nc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationChannelClient) DeleteOneID(id int) *NotificationChannelDeleteOne {
	builder := c.Delete().Where(notificationchannel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationChannelDeleteOne{builder}
}

// Query returns a query builder for NotificationChannel.
func (c *NotificationChannelClient) Query() *NotificationChannelQuery {
	return &NotificationChannelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotificationChannel},
		inters: c.Interceptors(),
	}
}

// Get returns a NotificationChannel entity by its id.
func (c *NotificationChannelClient) Get(ctx context.Context, id int) (*NotificationChannel, error) {
	return c.Query().Where(notificationchannel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationChannelClient) GetX(ctx context.Context, id int) *NotificationChannel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NotificationChannelClient) Hooks() []Hook {
	return c.hooks.NotificationChannel
}

// Interceptors returns the client interceptors.
func (c *NotificationChannelClient) Interceptors() []Interceptor {
	return c.inters.NotificationChannel
}

func (c *NotificationChannelClient) mutate(ctx context.Context, m *NotificationChannelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationChannelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationChannelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotificationChannel mutation op: %q", m.Op())
	}
}

// ProjectClient is a client for the Project schema.
type ProjectClient struct {
	config
}

// NewProjectClient returns a client for the Project from the given config.
func NewProjectClient(c config) *ProjectClient {
	return &ProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `project.Hooks(f(g(h())))`.
func (c *ProjectClient) Use(hooks ...Hook) {
	c.hooks.Project = append(c.hooks.Project, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `project.Intercept(f(g(h())))`.
func (c *ProjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.Project = append(c.inters.Project, interceptors...)
}

// Create returns a builder for creating a Project entity.
func (c *ProjectClient) Create() *ProjectCreate {
	mutation := newProjectMutation(c.config, OpCreate)
	return &ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Project entities.
func (c *ProjectClient) CreateBulk(builders ...*ProjectCreate) *ProjectCreateBulk {
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Project.
func (c *ProjectClient) Update() *ProjectUpdate {
	mutation := newProjectMutation(c.config, OpUpdate)
	return &ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectClient) UpdateOne(pr *Project) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProject(pr))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectClient) UpdateOneID(id int) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProjectID(id))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Project.
func (c *ProjectClient) Delete() *ProjectDelete {
	mutation := newProjectMutation(c.config, OpDelete)
	return &ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectClient) DeleteOne(pr *Project) *ProjectDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectClient) DeleteOneID(id int) *ProjectDeleteOne {
	builder := c.Delete().Where(project.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDeleteOne{builder}
}

// Query returns a query builder for Project.
func (c *ProjectClient) Query() *ProjectQuery {
	return &ProjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProject},
		inters: c.Interceptors(),
	}
}

// Get returns a Project entity by its id.
func (c *ProjectClient) Get(ctx context.Context, id int) (*Project, error) {
	return c.Query().Where(project.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectClient) GetX(ctx context.Context, id int) *Project {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProjectClient) Hooks() []Hook {
	return c.hooks.Project
}

// Interceptors returns the client interceptors.
func (c *ProjectClient) Interceptors() []Interceptor {
	return c.inters.Project
}

func (c *ProjectClient) mutate(ctx context.Context, m *ProjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Project mutation op: %q", m.Op())
	}
}

// ScriptClient is a client for the Script schema.
type ScriptClient struct {
	config
}

// NewScriptClient returns a client for the Script from the given config.
func NewScriptClient(c config) *ScriptClient {
	return &ScriptClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `script.Hooks(f(g(h())))`.
func (c *ScriptClient) Use(hooks ...Hook) {
	c.hooks.Script = append(c.hooks.Script, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `script.Intercept(f(g(h())))`.
func (c *ScriptClient) Intercept(interceptors ...Interceptor) {
	c.inters.Script = append(c.inters.Script, interceptors...)
}

// Create returns a builder for creating a Script entity.
func (c *ScriptClient) Create() *ScriptCreate {
	mutation := newScriptMutation(c.config, OpCreate)
	return &ScriptCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Script entities.
func (c *ScriptClient) CreateBulk(builders ...*ScriptCreate) *ScriptCreateBulk {
	return &ScriptCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Script.
func (c *ScriptClient) Update() *ScriptUpdate {
	mutation := newScriptMutation(c.config, OpUpdate)
	return &ScriptUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScriptClient) UpdateOne(s *Script) *ScriptUpdateOne {
	mutation := newScriptMutation(c.config, OpUpdateOne, withScript(s))
	return &ScriptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScriptClient) UpdateOneID(id int) *ScriptUpdateOne {
	mutation := newScriptMutation(c.config, OpUpdateOne, withScriptID(id))
	return &ScriptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Script.
func (c *ScriptClient) Delete() *ScriptDelete {
	mutation := newScriptMutation(c.config, OpDelete)
	return &ScriptDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScriptClient) DeleteOne(s *Script) *ScriptDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ScriptClient) DeleteOneID(id int) *ScriptDeleteOne {
	builder := c.Delete().Where(script.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScriptDeleteOne{builder}
}

// Query returns a query builder for Script.
func (c *ScriptClient) Query() *ScriptQuery {
	return &ScriptQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeScript},
		inters: c.Interceptors(),
	}
}

// Get returns a Script entity by its id.
func (c *ScriptClient) Get(ctx context.Context, id int) (*Script, error) {
	return c.Query().Where(script.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScriptClient) GetX(ctx context.Context, id int) *Script {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ScriptClient) Hooks() []Hook {
	return c.hooks.Script
}

// Interceptors returns the client interceptors.
func (c *ScriptClient) Interceptors() []Interceptor {
	return c.inters.Script
}

func (c *ScriptClient) mutate(ctx context.Context, m *ScriptMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ScriptCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ScriptUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ScriptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ScriptDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Script mutation op: %q", m.Op())
	}
}

// ScriptStatsClient is a client for the ScriptStats schema.
type ScriptStatsClient struct {
	config
}

// NewScriptStatsClient returns a client for the ScriptStats from the given config.
func NewScriptStatsClient(c config) *ScriptStatsClient {
	return &ScriptStatsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `scriptstats.Hooks(f(g(h())))`.
func (c *ScriptStatsClient) Use(hooks ...Hook) {
	c.hooks.ScriptStats = append(c.hooks.ScriptStats, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `scriptstats.Intercept(f(g(h())))`.
func (c *ScriptStatsClient) Intercept(interceptors ...Interceptor) {
	c.inters.ScriptStats = append(c.inters.ScriptStats, interceptors...)
}

// Create returns a builder for creating a ScriptStats entity.
func (c *ScriptStatsClient) Create() *ScriptStatsCreate {
	mutation := newScriptStatsMutation(c.config, OpCreate)
	return &ScriptStatsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ScriptStats entities.
func (c *ScriptStatsClient) CreateBulk(builders ...*ScriptStatsCreate) *ScriptStatsCreateBulk {
	return &ScriptStatsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ScriptStats.
func (c *ScriptStatsClient) Update() *ScriptStatsUpdate {
	mutation := newScriptStatsMutation(c.config, OpUpdate)
	return &ScriptStatsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScriptStatsClient) UpdateOne(ss *ScriptStats) *ScriptStatsUpdateOne {
	mutation := newScriptStatsMutation(c.config, OpUpdateOne, withScriptStats(ss))
	return &ScriptStatsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScriptStatsClient) UpdateOneID(id int) *ScriptStatsUpdateOne {
	mutation := newScriptStatsMutation(c.config, OpUpdateOne, withScriptStatsID(id))
	return &ScriptStatsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ScriptStats.
func (c *ScriptStatsClient) Delete() *ScriptStatsDelete {
	mutation := newScriptStatsMutation(c.config, OpDelete)
	return &ScriptStatsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScriptStatsClient) DeleteOne(ss *ScriptStats) *ScriptStatsDeleteOne {
	return c.DeleteOneID(ss.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ScriptStatsClient) DeleteOneID(id int) *ScriptStatsDeleteOne {
	builder := c.Delete().Where(scriptstats.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScriptStatsDeleteOne{builder}
}

// Query returns a query builder for ScriptStats.
func (c *ScriptStatsClient) Query() *ScriptStatsQuery {
	return &ScriptStatsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeScriptStats},
		inters: c.Interceptors(),
	}
}

// Get returns a ScriptStats entity by its id.
func (c *ScriptStatsClient) Get(ctx context.Context, id int) (*ScriptStats, error) {
	return c.Query().Where(scriptstats.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScriptStatsClient) GetX(ctx context.Context, id int) *ScriptStats {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ScriptStatsClient) Hooks() []Hook {
	return c.hooks.ScriptStats
}

// Interceptors returns the client interceptors.
func (c *ScriptStatsClient) Interceptors() []Interceptor {
	return c.inters.ScriptStats
}

func (c *ScriptStatsClient) mutate(ctx context.Context, m *ScriptStatsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ScriptStatsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ScriptStatsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ScriptStatsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ScriptStatsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ScriptStats mutation op: %q", m.Op())
	}
}

// SecretClient is a client for the Secret schema.
type SecretClient struct {
	config
}

// NewSecretClient returns a client for the Secret from the given config.
func NewSecretClient(c config) *SecretClient {
	return &SecretClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `secret.Hooks(f(g(h())))`.
func (c *SecretClient) Use(hooks ...Hook) {
	c.hooks.Secret = append(c.hooks.Secret, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `secret.Intercept(f(g(h())))`.
func (c *SecretClient) Intercept(interceptors ...Interceptor) {
	c.inters.Secret = append(c.inters.Secret, interceptors...)
}

// Create returns a builder for creating a Secret entity.
func (c *SecretClient) Create() *SecretCreate {
	mutation := newSecretMutation(c.config, OpCreate)
	return &SecretCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Secret entities.
func (c *SecretClient) CreateBulk(builders ...*SecretCreate) *SecretCreateBulk {
	return &SecretCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Secret.
func (c *SecretClient) Update() *SecretUpdate {
	mutation := newSecretMutation(c.config, OpUpdate)
	return &SecretUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SecretClient) UpdateOne(s *Secret) *SecretUpdateOne {
	mutation := newSecretMutation(c.config, OpUpdateOne, withSecret(s))
	return &SecretUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SecretClient) UpdateOneID(id int) *SecretUpdateOne {
	mutation := newSecretMutation(c.config, OpUpdateOne, withSecretID(id))
	return &SecretUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Secret.
func (c *SecretClient) Delete() *SecretDelete {
	mutation := newSecretMutation(c.config, OpDelete)
	return &SecretDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SecretClient) DeleteOne(s *Secret) *SecretDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SecretClient) DeleteOneID(id int) *SecretDeleteOne {
	builder := c.Delete().Where(secret.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SecretDeleteOne{builder}
}

// Query returns a query builder for Secret.
func (c *SecretClient) Query() *SecretQuery {
	return &SecretQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSecret},
		inters: c.Interceptors(),
	}
}

// Get returns a Secret entity by its id.
func (c *SecretClient) Get(ctx context.Context, id int) (*Secret, error) {
	return c.Query().Where(secret.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SecretClient) GetX(ctx context.Context, id int) *Secret {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SecretClient) Hooks() []Hook {
	return c.hooks.Secret
}

// Interceptors returns the client interceptors.
func (c *SecretClient) Interceptors() []Interceptor {
	return c.inters.Secret
}

func (c *SecretClient) mutate(ctx context.Context, m *SecretMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SecretCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SecretUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SecretUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SecretDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Secret mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Access, History, NotificationChannel, Project, Script, ScriptStats, Secret,
		User []ent.Hook
	}
	inters struct {
		Access, History, NotificationChannel, Project, Script, ScriptStats, Secret,
		User []ent.Interceptor
	}
)
